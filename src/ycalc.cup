import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
   
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/** Terminals */

terminal           AND, OR, NOT, TRUE, FALSE, SONRA; // boolean

// flow
terminal           BEGIN, END, EXIT;
terminal           EGER, ISE, DEGIL, YADA; //eğer, ise, ya da eklendi
terminal           WHILE;
terminal           DEGIS, ILE, ARASINDA;

terminal           INSIDE, EVERY, FOR, VALUE;  //foreach loop için

terminal           CONTINUE, BREAK, LCURLY, RCURLY;
terminal           FUNCTION, RETURN;

terminal           YAZ, READINT, LENGTH, POSITION, READSTR, CONCATENATE, SUBSTRING, LIST;  // commands
terminal           ASSIGN;
terminal   	       EQ, LT, LE, GT, GE, NE; // num_rel
terminal    	   STREQ, STRNOTEQ; //str_rel
terminal    	   ART,AZ;

terminal           SEMI, COMMA, PLUS, MINUS, TIMES, DIVIDE, MODE, LPAREN, RPAREN;
terminal Integer   NUM;
terminal String    IDENT;
terminal String    STRING;
terminal           LISTE;


/** Non-terminals **/
non terminal Expr expr;
non terminal Expr num_expr;
non terminal Expr str_expr;
non terminal Expr bool_expr;
non terminal Expr list_stat;
non terminal Expr expr_list;
non terminal Expr function_name;
non terminal Expr return_function;



non terminal Operator num_op;
non terminal Condition num_rel;
non terminal Condition str_rel;

non terminal SimpleInstruction simple_instr;
non terminal InstructionList instr;
non terminal ListContent list_content;
non terminal ElseIfContent if_content;
non terminal SimpleInstruction break_stat;
non terminal SimpleInstruction continue_stat;

non terminal SimpleInstruction assign_stat;
non terminal SimpleInstruction if_stat;
non terminal SimpleInstruction while_stat;
non terminal SimpleInstruction for_stat;
non terminal SimpleInstruction foreach_stat;
non terminal SimpleInstruction output_stat;
non terminal SimpleInstruction function_stat;
non terminal SimpleInstruction call_function;
non terminal Main program;
non terminal Recursive recursive;
non terminal RecursiveID recursive_id;
non terminal RecursiveIDFunc recursive_id_Func;

/** Precedence */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODE;

precedence left OR, AND, SONRA;
precedence left NOT;

precedence left DEGIL;
precedence left YADA;

start with program;

/** ============= GRAMMAR ============= */

/** done */
num_op ::= PLUS             {: RESULT = new PlusOperator(); :}
         | MINUS            {: RESULT = new MinusOperator(); :}
         | TIMES            {: RESULT = new TimesOperator(); :}
         | DIVIDE           {: RESULT = new DivideOperator(); :}
         | MODE             {: RESULT = new ModeOperator(); :}
         ;

expr ::= IDENT:i            {: RESULT = new ID(i); :}
            |num_expr:e     {: RESULT = e; :}
            |str_expr:e     {: RESULT = e; :}
            |list_stat:e    {: RESULT = e; :}
            ;

list_content ::=  list_content:a  COMMA   expr:e      {: a.add(e); RESULT = a;:}
                        | expr:e      {: RESULT = new ListContent(e);:} ;

list_stat ::= LIST LPAREN list_content:e RPAREN {:
    RESULT = new ListExpr(e.getExpr());
:};



num_expr ::=  NUM:e
                {:
                    RESULT = new IntExpression(e.intValue());
                :}
            | READINT
                 {:
                    RESULT = new IntEnterExpression();
                 :}
            | MINUS expr:e
                {:
                    RESULT = new UMinusExpression(e);
                :}
            | LPAREN expr:e RPAREN
                {:
                    RESULT = new PIntExpression(e);
                :}
            | LENGTH LPAREN expr:e RPAREN
                {:
                    RESULT = new STRLengthExpression(e);
                :}
            | POSITION LPAREN expr:s COMMA expr:s2 RPAREN
                {:
                    RESULT = new STRPositionExpression(s, s2);
                :}
            | expr:e num_op:o expr:e2
                {:
                    RESULT = new OperatorExpression(e, o, e2);
                :}
            ;

str_expr ::=  STRING:s
                {:
                    RESULT = new StringExpression(s.substring(1, s.length()-1));
                :}
             | READSTR
                {:
                    RESULT = new StrEnterExpression();
                :}
            | CONCATENATE LPAREN expr:s COMMA expr:s2 RPAREN
                {:
                    RESULT = new ConcatStringExpression(s, s2);
                :}
              | SUBSTRING LPAREN expr:s COMMA expr:pos COMMA expr:length RPAREN
                {:
                    RESULT = new SubStringExpression(s, pos, length);
                :}
             ;

num_rel ::=   EQ         {: RESULT = new EqCond(); :}
            | LT         {: RESULT = new LtCond(); :}
            | LE         {: RESULT = new LeCond(); :}
            | GT         {: RESULT = new GtCond(); :}
            | GE         {: RESULT = new GeCond(); :}
            | NE         {: RESULT = new NeCond(); :}
            ;

str_rel ::= STREQ     {: RESULT = new EqCond(); :}
          | STRNOTEQ  {: RESULT = new StrNotEqCond(); :}
          ;

bool_expr ::= TRUE                               {: RESULT = new BooleanExpression(true); :}
            | FALSE                              {: RESULT = new BooleanExpression(false); :}
            | LPAREN bool_expr:e RPAREN          {: RESULT = new PBooleanExpression(e); :}
            | NOT bool_expr:e                    {: RESULT = new NegationBooleanExpression(e); :}
            | bool_expr:e AND bool_expr:e2       {: RESULT = new AndBooleanExpression(e, e2); :}
            | bool_expr:e OR bool_expr:e2        {: RESULT = new OrBooleanExpression(e, e2); :}
            | expr: e num_rel:o expr:e2          {: RESULT = new ConditionBooleanExpression(e, o, e2); :}
            | expr:s str_rel:o expr:s2           {: RESULT = new ConditionBooleanExpression(s, o, s2); :}
            ;

simple_instr ::= assign_stat:si                  {: RESULT = si; :}
              | if_stat:si                       {: RESULT = si; :}
              | break_stat:si                    {: RESULT = si; :}
              | continue_stat:si                 {: RESULT = si; :}
              | while_stat:si                    {: RESULT = si; :}
              | for_stat:si                      {: RESULT = si; :}
              | foreach_stat:si                  {: RESULT = si; :}
              | function_stat:si                 {: RESULT = si; :}
              | call_function:si                 {: RESULT = si; :}
              | BEGIN instr:si END               {: RESULT = new BeginEndInstruction(si); :}
              | output_stat:si                   {: RESULT = si; :}
              | EXIT                             {: System.exit(0); :}
              ;

instr ::= instr:i SEMI simple_instr:si           {: i.add(si); RESULT = i; :}
        | simple_instr:si                        {: RESULT = new InstructionList(si); :}
        ;

assign_stat ::= IDENT:i ASSIGN expr:e            {: RESULT = new AssignInstruction(i,e); :}
        ;

recursive::= recursive:i SONRA simple_instr:si    {: i.add(si); RESULT = i; :}
           | simple_instr:si                     {: RESULT = new Recursive(si); :}
          ;

if_stat ::= EGER bool_expr:c ISE LCURLY recursive:s RCURLY   {: RESULT = new IfInstruction(c, s.getSimplein()); :}
          | EGER bool_expr:c ISE LCURLY recursive:s RCURLY DEGIL ISE  LCURLY recursive:s2   RCURLY   {: RESULT = new IfElseIfInstruction(c, s.getSimplein(), s2.getSimplein()); :}
          | EGER bool_expr:c ISE LCURLY recursive:s RCURLY if_content:cont  {: RESULT = new IfElseInstruction(c, s.getSimplein(), cont.getExpr(), cont.getSimpleinsList()); :}
          | EGER bool_expr:c ISE LCURLY recursive:s RCURLY if_content:cont DEGIL ISE LCURLY recursive:s3 RCURLY  {:  RESULT = new ElseInstruction(c, s.getSimplein(), cont.getExpr(), cont.getSimpleinsList(), s3.getSimplein()); :}
          ;

if_content ::= if_content:cont YADA bool_expr:c2 ISE LCURLY recursive:s2 RCURLY  {:cont.add(c2,s2.getSimplein()); RESULT = cont;:}
            |   YADA bool_expr:c2 ISE LCURLY recursive:s2 RCURLY {: RESULT = new ElseIfContent(c2, s2.getSimplein()); :}
            ;

for_stat::= IDENT:i DEGIS expr:e ILE expr:e2 ARASINDA expr:e3 ART recursive:s {: RESULT = new ForInstruction(i,e,e2,e3,s.getSimplein()); :}
           |IDENT:i DEGIS expr:e ILE expr:e2 ARASINDA expr:e3 AZ recursive:s  {: RESULT = new ForInstruction2(i,e,e2,e3,s.getSimplein()); :}
            ;

foreach_stat ::= expr:e INSIDE EVERY IDENT:i VALUE FOR recursive:s {: RESULT = new ForeachInstruction(e, i, s.getSimplein()); :}
            ;

while_stat ::= LPAREN bool_expr:c RPAREN WHILE recursive:s       {: RESULT = new WhileInstruction(c, s.getSimplein()); :}
            ;

output_stat ::= YAZ LPAREN expr:e  RPAREN               {: RESULT = new OutputInstruction(e); :}
            ;

break_stat::= BREAK {: RESULT = new BreakInstruction(); :}
            ;

continue_stat::= CONTINUE {: RESULT = new ContinueInstruction(); :}
            ;

function_stat::=  recursive_id:i ILE IDENT:e FUNCTION LCURLY recursive:si SEMI return_function:r RCURLY {: RESULT = new FunctionInstruction(i.getRecursiveID() , e , si.getSimplein(), r ); :}
            ;

recursive_id ::=  recursive_id:a  COMMA   expr:e      {: a.add(e); RESULT = a;:} //sonsuz expr
                        | expr:e      {: RESULT = new RecursiveID(e);:}
                        ;

return_function::= expr:e RETURN {: RESULT = new ReturnInstruction(e); :}
            ;

call_function ::= recursive_id:e ILE IDENT:i
                  {: RESULT = new CallFunction(i, e.getRecursiveID()); :}
                  ;


program ::= instr:i
          {:
            Main program = new Main(i);
            program.exec();
          :}
          ;