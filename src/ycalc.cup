import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
   
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("HATA: ");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append((s.left+1)+". satırda ");
                if (s.right >= 0)
                    m.append(","+(s.right+1)+". sütunda");
            }
        }
        if (message.equals("Syntax error")) {
                m.append(": Syntax hatası bulunuyor, lütfen aşağıda belirtilen geçerli ifadelerden birini kullanınız.");
            } else if (message.equals("Couldn't repair and continue parse")) {
                m.append(": Hatalı kod onarılamadı ve çözümlemeye devam edilemedi.");
            } else if (message.substring(0,8)=="instead") {
                     m.append(" Beklenen belirteç türleri: ");
            } else {
                m.append(": " + message);
            }
            System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/** Terminals */

terminal           AND, OR, TRUE, FALSE; // boolean

// flow
terminal           BEGIN, END, EXIT;
terminal           EGER, ISE, DEGIL, YADA; //eğer, ise, ya da eklendi
terminal           WHILE;
terminal           DEGIS, ILE, ARASINDA;

terminal           INSIDE, EVERY, FOR, VALUE;  //foreach loop için

terminal           CONTINUE, BREAK, LCURLY, RCURLY;
terminal           FUNCTION, RETURN;

terminal           YAZ, READINT, LENGTH, POSITION, READSTR, CONCATENATE, SUBSTRING, LIST;  // commands
terminal           ASSIGN;
terminal   	       EQ, LT, LE, GT, GE, NE, NOT; // num_rel
terminal    	   STREQ, STRNOTEQ; //str_rel
terminal    	   ART,AZ;
terminal           CAGIR;

terminal           SEMI, COMMA, PLUS, MINUS, TIMES, DIVIDE, MODE, LPAREN, RPAREN, DOT;
terminal Integer   NUM;
terminal String    IDENT;
terminal String    STRING;
terminal           VARIABLE, LISTDELETEVARIABLE;
terminal           TOLIST, LISTADD, LISTGET, LISTREMOVE, LISTLENGTH, LISTCLEAR, LISTINDEX, LISTUPDATE;
terminal RANDOM;

/** Non-terminals **/
non terminal Expr expr;
non terminal Expr num_expr;
non terminal Expr str_expr;
non terminal Expr bool_expr;
non terminal Expr list_stat;
non terminal Expr list_get;
non terminal Expr list_length;
non terminal Expr list_index;
non terminal Expr call_return_function;
non terminal Expr expr_or_bool;
non terminal Expr random_expr;

non terminal Operator num_op;
non terminal Condition num_rel;
non terminal Condition str_rel;

non terminal SimpleInstruction simple_instr;
non terminal InstructionList instr;
non terminal ListContent list_content;
non terminal ElseIfContent if_content;
non terminal SimpleInstruction break_stat;
non terminal SimpleInstruction continue_stat;
non terminal SimpleInstruction exit_stat;

non terminal SimpleInstruction assign_stat;
non terminal SimpleInstruction if_stat;
non terminal SimpleInstruction while_stat;
non terminal SimpleInstruction for_stat;
non terminal SimpleInstruction foreach_stat;
non terminal SimpleInstruction output_stat;
non terminal SimpleInstruction function_stat;
non terminal SimpleInstruction call_function;
non terminal SimpleInstruction list_add;
non terminal SimpleInstruction list_remove;
non terminal SimpleInstruction list_clear;
non terminal SimpleInstruction list_update;

non terminal ReturnInstruction return_function;

non terminal Main program;
non terminal Recursive recursive;
non terminal RecursiveID recursive_id;


/** Precedence */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODE;
precedence left OR, AND;

precedence left YADA;
precedence left LISTREMOVE;
precedence left LISTGET;
precedence left LISTLENGTH;

precedence left SEMI;
precedence left LCURLY;
precedence left CAGIR;

precedence left DEGIL;

start with program;

/** ============= GRAMMAR ============= */

num_op ::= PLUS             {: RESULT = new PlusOperator(); :}
         | MINUS            {: RESULT = new MinusOperator(); :}
         | TIMES            {: RESULT = new TimesOperator(); :}
         | DIVIDE           {: RESULT = new DivideOperator(); :}
         | MODE             {: RESULT = new ModeOperator(); :}
         ;

expr ::= IDENT:i                    {: RESULT = new ID(i); :}
            |num_expr:e             {: RESULT = e; :}
            |str_expr:e             {: RESULT = e; :}
            |list_stat:e            {: RESULT = e; :}
            |list_get:e             {: RESULT = e; :}
            |list_length:e          {: RESULT = e; :}
            |list_index:e           {: RESULT = e; :}
            |random_expr:e          {: RESULT = e; :}
            |call_return_function:e {: RESULT = e; :}
            ;

list_content ::=  list_content:a  COMMA   expr:e  {: a.add(e); RESULT = a;:}
                        | expr:e                  {: RESULT = new ListContent(e);:} ;

list_stat ::= LIST LPAREN list_content:e RPAREN {:
    RESULT = new ListExpr(e.getExpr());
                :}
                | LIST LPAREN RPAREN {:
                ArrayList<Expr> val = new ArrayList<>();
                RESULT = new ListExpr(val);
                :}
                ;

list_add ::= expr:e TOLIST expr:e1 LISTADD {: RESULT = new ListAdd(e,e1);:};
list_get ::= expr:e LISTGET expr:e1 DOT VARIABLE {: RESULT = new ListGet(e,e1); :};
list_remove ::= expr:e LISTGET expr:e1 DOT LISTDELETEVARIABLE LISTREMOVE {: RESULT = new ListRemove(e,e1); :};
list_length ::= expr:e LISTLENGTH {: RESULT = new ListLength(e); :};
list_clear ::= expr:e LISTCLEAR {: RESULT = new ListClear(e); :};
list_index ::= expr:e LISTGET expr:e1 LISTINDEX{: RESULT = new ListIndex(e,e1); :};
list_update ::= expr:e LISTUPDATE expr:e1 DOT LISTDELETEVARIABLE ASSIGN expr: e2 {: RESULT = new ListUpdate(e, e1, e2); :};



num_expr ::=  NUM:e
                {:
                    RESULT = new IntExpression(e.intValue());
                :}
            | READINT
                 {:
                    RESULT = new IntEnterExpression();
                 :}
            | MINUS expr:e
                {:
                    RESULT = new UMinusExpression(e);
                :}
            | LPAREN expr:e RPAREN
                {:
                    RESULT = new PIntExpression(e);
                :}
            | LENGTH LPAREN expr:e RPAREN
                {:
                    RESULT = new STRLengthExpression(e);
                :}
            | POSITION LPAREN expr:s COMMA expr:s2 RPAREN
                {:
                    RESULT = new STRPositionExpression(s, s2);
                :}
            | expr:e num_op:o expr:e2
                {:
                    RESULT = new OperatorExpression(e, o, e2);
                :}
            ;

str_expr ::=  STRING:s
                {:
                    RESULT = new StringExpression(s.substring(1, s.length()-1));
                :}
             | READSTR
                {:
                    RESULT = new StrEnterExpression();
                :}
            | CONCATENATE LPAREN expr:s COMMA expr:s2 RPAREN
                {:
                    RESULT = new ConcatStringExpression(s, s2);
                :}
              | SUBSTRING LPAREN expr:s COMMA expr:pos COMMA expr:length RPAREN
                {:
                    RESULT = new SubStringExpression(s, pos, length);
                :}
             ;

num_rel ::=   EQ         {: RESULT = new EqCond(); :}
            | LT         {: RESULT = new LtCond(); :}
            | LE         {: RESULT = new LeCond(); :}
            | GT         {: RESULT = new GtCond(); :}
            | GE         {: RESULT = new GeCond(); :}
            | NE         {: RESULT = new NeCond(); :}
            ;

str_rel ::= STREQ     {: RESULT = new EqCond(); :}
          | STRNOTEQ  {: RESULT = new NeCond(); :}
          ;

expr_or_bool ::= expr:e        {: RESULT = e; :}
                 | bool_expr:e {: RESULT = e; :};
bool_expr ::= TRUE                               {: RESULT = new BooleanExpression(true); :}
            | FALSE                              {: RESULT = new BooleanExpression(false); :}
            | LPAREN bool_expr:e RPAREN          {: RESULT = new PBooleanExpression(e); :}
            | NOT expr_or_bool:e                {: RESULT = new NegationBooleanExpression(e); :}
            | bool_expr:e AND bool_expr:e2       {: RESULT = new AndBooleanExpression(e, e2); :}
            | bool_expr:e OR bool_expr:e2        {: RESULT = new OrBooleanExpression(e, e2); :}
            | expr: e num_rel:o expr_or_bool:e2  {: RESULT = new ConditionBooleanExpression(e, o, e2); :}
            | expr:s str_rel:o expr_or_bool:s2   {: RESULT = new ConditionBooleanExpression(s, o, s2); :}
            ;

simple_instr ::= assign_stat:si                  {: RESULT = si; :}
              | if_stat:si                       {: RESULT = si; :}
              | break_stat:si                    {: RESULT = si; :}
              | continue_stat:si                 {: RESULT = si; :}
              | while_stat:si                    {: RESULT = si; :}
              | for_stat:si                      {: RESULT = si; :}
              | foreach_stat:si                  {: RESULT = si; :}
              | function_stat:si                 {: RESULT = si; :}
              | exit_stat : si                   {: RESULT = si; :}
              | call_function:si                 {: RESULT = si; :}
              | BEGIN instr:si SEMI END          {: RESULT = new BeginEndInstruction(si); :}
              | output_stat:si                   {: RESULT = si; :}
              | list_add:si                      {: RESULT = si; :}
              | list_remove:si                   {: RESULT = si; :}
              | list_clear:si                    {: RESULT = si; :}
              | list_update:si                   {: RESULT = si; :}
              ;

exit_stat ::= EXIT {: RESULT = new SimpleExit(); :}
            ;

random_expr ::= RANDOM LPAREN expr:e COMMA expr:e1 RPAREN  {:  RESULT = new RandomExpression(e,e1);:}
            | RANDOM LPAREN expr:e RPAREN {: RESULT = new RandomExpressionList(e);:}
            ;
instr ::= instr:i SEMI simple_instr:si           {: i.add(si); RESULT = i; :}
        | simple_instr:si                        {: RESULT = new InstructionList(si); :}
        ;

assign_stat ::= IDENT:i ASSIGN expr:e            {: RESULT = new AssignInstruction(i,e); :}
             | IDENT:i ASSIGN bool_expr:e        {: RESULT = new BooleanAssignInstruction(i, e); :}
            ;

recursive::= recursive:i SEMI simple_instr:si     {: i.add(si); RESULT = i; :}
           | simple_instr:si                      {: RESULT = new Recursive(si); :}
          ;

if_stat ::= EGER expr_or_bool:c ISE LCURLY recursive:s SEMI RCURLY {: RESULT = new IfInstruction(c, s.getSimplein()); :}
 | EGER expr_or_bool:c ISE LCURLY recursive:s SEMI RCURLY DEGIL ISE LCURLY recursive:s2 SEMI RCURLY {: RESULT = new IfElseIfInstruction(c, s.getSimplein(), s2.getSimplein()); :}
 | EGER expr_or_bool:c ISE LCURLY recursive:s SEMI RCURLY if_content:cont {: RESULT = new IfElseInstruction(c, s.getSimplein(), cont.getExpr(), cont.getSimpleinsList()); :}
 | EGER expr_or_bool:c ISE LCURLY recursive:s SEMI RCURLY if_content:cont DEGIL ISE LCURLY recursive:s3 SEMI RCURLY {: RESULT = new ElseInstruction(c, s.getSimplein(), cont.getExpr(), cont.getSimpleinsList(), s3.getSimplein()); :}
 ;

if_content ::= if_content:cont YADA expr_or_bool:c2 ISE LCURLY recursive:s2 SEMI RCURLY  {:cont.add(c2,s2.getSimplein()); RESULT = cont;:}
            |  YADA expr_or_bool:c2 ISE LCURLY recursive:s2 SEMI RCURLY                  {: RESULT = new ElseIfContent(c2, s2.getSimplein()); :}
            ;

for_stat::= IDENT:i DEGIS expr:e ILE expr:e2 ARASINDA expr:e3 ART LCURLY recursive:s SEMI RCURLY  {: RESULT = new ForInstruction(i,e,e2,e3,s.getSimplein()); :}
           |IDENT:i DEGIS expr:e ILE expr:e2 ARASINDA expr:e3 AZ LCURLY recursive:s SEMI RCURLY   {: RESULT = new ForInstruction2(i,e,e2,e3,s.getSimplein()); :}
            ;

foreach_stat ::= expr:e INSIDE EVERY IDENT:i VALUE FOR LCURLY recursive:s SEMI RCURLY  {: RESULT = new ForeachInstruction(e, i, s.getSimplein()); :}
            ;

while_stat ::= expr_or_bool:c WHILE LCURLY recursive:s SEMI RCURLY   {: RESULT = new WhileInstruction(c, s.getSimplein()); :}
            ;

output_stat ::= YAZ LPAREN expr:e RPAREN  {: RESULT = new OutputInstruction(e); :}
            | YAZ LPAREN RPAREN {: RESULT = new OutputInstructionEmpty(); :}
            ;

break_stat::= BREAK {: RESULT = new BreakInstruction(); :}
            ;

continue_stat::= CONTINUE {: RESULT = new ContinueInstruction(); :}
            ;

function_stat::=  recursive_id:i ILE IDENT:e FUNCTION LCURLY recursive:si SEMI RCURLY {: RESULT = new FunctionInstruction(i.getRecursiveID() , e , si.getSimplein() ); :}
                | recursive_id:i ILE IDENT:e FUNCTION LCURLY recursive:si SEMI return_function:r RCURLY {: RESULT = new FunctionReturnInstruction(i.getRecursiveID() , e , si.getSimplein(), r.getReturn() ); :}
                ;


recursive_id ::=  recursive_id:a  COMMA   expr:e    {: a.add(e); RESULT = a;:}  //sonsuz expr
                 | expr:e                           {: RESULT = new RecursiveID(e);:}
                 ;

return_function::= expr:e RETURN SEMI {: RESULT = new ReturnInstruction(e); :}
            ;

call_function ::= recursive_id:e ILE IDENT:i
                  {: RESULT = new CallFunction(i, e.getRecursiveID()); :}
                  ;

call_return_function ::= CAGIR recursive_id:e ILE IDENT:i
                  {: RESULT = new CallReturnFunction(i, e.getRecursiveID()); :}
                  ;


program ::= instr:i
          {:
            Main program = new Main(i);
            program.exec();
          :}
          ;