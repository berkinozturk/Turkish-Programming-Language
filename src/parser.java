
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\017\005\000\002\017\003\000\002" +
    "\006\006\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\005\000\002\003\006\000\002\003\010" +
    "\000\002\003\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\010\000\002\004\012\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\014\003\000\002\014\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\005\000" +
    "\002\015\003\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\023\005\000\002\032\005\000\002\032" +
    "\003\000\002\024\010\000\002\024\015\000\002\024\011" +
    "\000\002\024\016\000\002\020\011\000\002\020\010\000" +
    "\002\026\013\000\002\026\013\000\002\025\007\000\002" +
    "\027\006\000\002\021\003\000\002\022\003\000\002\030" +
    "\013\000\002\033\005\000\002\033\003\000\002\011\004" +
    "\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\046\012\023\014\004\015\015\025\005\026" +
    "\030\033\021\034\044\035\032\036\027\037\024\040\040" +
    "\041\031\042\012\061\036\065\017\067\020\070\006\071" +
    "\025\001\002\000\014\002\uffd0\011\uffd0\013\uffd0\030\uffd0" +
    "\056\uffd0\001\002\000\014\002\uffbf\011\uffbf\013\uffbf\030" +
    "\uffbf\056\uffbf\001\002\000\024\022\234\023\ufffb\043\235" +
    "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\001" +
    "\002\000\020\023\uffbc\057\uffbc\060\057\061\060\062\063" +
    "\063\062\064\056\001\002\000\006\023\221\057\220\001" +
    "\002\000\072\002\ufff8\004\ufff8\005\ufff8\011\ufff8\013\ufff8" +
    "\016\ufff8\023\ufff8\024\ufff8\030\ufff8\032\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062" +
    "\ufff8\063\ufff8\064\ufff8\066\ufff8\001\002\000\004\065\212" +
    "\001\002\000\010\002\uffce\013\uffce\056\uffce\001\002\000" +
    "\014\002\uffd3\011\uffd3\013\uffd3\030\uffd3\056\uffd3\001\002" +
    "\000\040\006\116\007\117\010\122\034\044\035\032\036" +
    "\027\037\024\040\040\041\031\042\012\061\036\065\120" +
    "\067\020\070\051\071\025\001\002\000\004\002\155\001" +
    "\002\000\040\006\116\007\117\010\122\034\044\035\032" +
    "\036\027\037\024\040\040\041\031\042\012\061\036\065" +
    "\120\067\020\070\051\071\025\001\002\000\072\002\ufff4" +
    "\004\ufff4\005\ufff4\011\ufff4\013\ufff4\016\ufff4\023\ufff4\024" +
    "\ufff4\030\ufff4\032\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\066\ufff4\001\002\000\004\065\112\001\002\000\072\002" +
    "\ufffa\004\ufffa\005\ufffa\011\ufffa\013\ufffa\016\ufffa\023\ufffa" +
    "\024\ufffa\030\ufffa\032\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064" +
    "\ufffa\066\ufffa\001\002\000\046\012\023\014\004\015\015" +
    "\025\005\026\030\033\021\034\044\035\032\036\027\037" +
    "\024\040\040\041\031\042\012\061\036\065\017\067\020" +
    "\070\006\071\025\001\002\000\072\002\uffec\004\uffec\005" +
    "\uffec\011\uffec\013\uffec\016\uffec\023\uffec\024\uffec\030\uffec" +
    "\032\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec" +
    "\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\066\uffec\001" +
    "\002\000\072\002\uffed\004\uffed\005\uffed\011\uffed\013\uffed" +
    "\016\uffed\023\uffed\024\uffed\030\uffed\032\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062" +
    "\uffed\063\uffed\064\uffed\066\uffed\001\002\000\014\002\uffd1" +
    "\011\uffd1\013\uffd1\030\uffd1\056\uffd1\001\002\000\004\065" +
    "\103\001\002\000\014\002\uffc0\011\uffc0\013\uffc0\030\uffc0" +
    "\056\uffc0\001\002\000\004\065\074\001\002\000\004\065" +
    "\071\001\002\000\014\002\uffd8\011\uffd8\013\uffd8\030\uffd8" +
    "\056\uffd8\001\002\000\014\002\uffd7\011\uffd7\013\uffd7\030" +
    "\uffd7\056\uffd7\001\002\000\072\002\ufff9\004\ufff9\005\ufff9" +
    "\011\ufff9\013\ufff9\016\ufff9\023\ufff9\024\ufff9\030\ufff9\032" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\066\ufff9\001\002" +
    "\000\032\034\044\035\032\036\027\037\024\040\040\041" +
    "\031\042\012\061\036\065\053\067\020\070\051\071\025" +
    "\001\002\000\014\002\uffd4\011\uffd4\013\uffd4\030\uffd4\056" +
    "\uffd4\001\002\000\004\065\050\001\002\000\014\002\uffd9" +
    "\011\uffd9\013\uffd9\030\uffd9\056\uffd9\001\002\000\006\002" +
    "\uffba\056\046\001\002\000\014\002\uffd6\011\uffd6\013\uffd6" +
    "\030\uffd6\056\uffd6\001\002\000\072\002\ufff3\004\ufff3\005" +
    "\ufff3\011\ufff3\013\ufff3\016\ufff3\023\ufff3\024\ufff3\030\ufff3" +
    "\032\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\066\ufff3\001" +
    "\002\000\014\002\uffd5\011\uffd5\013\uffd5\030\uffd5\056\uffd5" +
    "\001\002\000\046\012\023\014\004\015\015\025\005\026" +
    "\030\033\021\034\044\035\032\036\027\037\024\040\040" +
    "\041\031\042\012\061\036\065\017\067\020\070\006\071" +
    "\025\001\002\000\010\002\uffcf\013\uffcf\056\uffcf\001\002" +
    "\000\032\034\044\035\032\036\027\037\024\040\040\041" +
    "\031\042\012\061\036\065\053\067\020\070\051\071\025" +
    "\001\002\000\072\002\ufffb\004\ufffb\005\ufffb\011\ufffb\013" +
    "\ufffb\016\ufffb\023\ufffb\024\ufffb\030\ufffb\032\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb" +
    "\062\ufffb\063\ufffb\064\ufffb\066\ufffb\001\002\000\016\057" +
    "\065\060\057\061\060\062\063\063\062\064\056\001\002" +
    "\000\032\034\044\035\032\036\027\037\024\040\040\041" +
    "\031\042\012\061\036\065\053\067\020\070\051\071\025" +
    "\001\002\000\016\060\057\061\060\062\063\063\062\064" +
    "\056\066\055\001\002\000\072\002\ufff1\004\ufff1\005\ufff1" +
    "\011\ufff1\013\ufff1\016\ufff1\023\ufff1\024\ufff1\030\ufff1\032" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1\001\002" +
    "\000\032\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\042\ufffc\061\ufffc\065\ufffc\067\ufffc\070\ufffc\071\ufffc" +
    "\001\002\000\032\034\000\035\000\036\000\037\000\040" +
    "\000\041\000\042\000\061\000\065\000\067\000\070\000" +
    "\071\000\001\002\000\032\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\061\uffff\065\uffff\067\uffff" +
    "\070\uffff\071\uffff\001\002\000\032\034\044\035\032\036" +
    "\027\037\024\040\040\041\031\042\012\061\036\065\053" +
    "\067\020\070\051\071\025\001\002\000\032\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\061\ufffd" +
    "\065\ufffd\067\ufffd\070\ufffd\071\ufffd\001\002\000\032\034" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\061\ufffe\065\ufffe\067\ufffe\070\ufffe\071\ufffe\001\002\000" +
    "\072\002\uffee\004\uffee\005\uffee\011\uffee\013\uffee\016\uffee" +
    "\023\uffee\024\uffee\030\uffee\032\uffee\044\uffee\045\uffee\046" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\055\uffee\056\uffee\057\uffee\060\057\061\060\062\063\063" +
    "\062\064\056\066\uffee\001\002\000\032\034\044\035\032" +
    "\036\027\037\024\040\040\041\031\042\012\061\036\065" +
    "\053\067\020\070\051\071\025\001\002\000\016\060\057" +
    "\061\060\062\063\063\062\064\056\066\067\001\002\000" +
    "\072\002\uffeb\004\uffeb\005\uffeb\011\uffeb\013\uffeb\016\uffeb" +
    "\023\uffeb\024\uffeb\030\uffeb\032\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\066\uffeb\001\002\000\072\002\ufff2\004\ufff2" +
    "\005\ufff2\011\ufff2\013\ufff2\016\ufff2\023\ufff2\024\ufff2\030" +
    "\ufff2\032\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\063\063\062\064\056\066\ufff2" +
    "\001\002\000\032\034\044\035\032\036\027\037\024\040" +
    "\040\041\031\042\012\061\036\065\053\067\020\070\051" +
    "\071\025\001\002\000\016\060\057\061\060\062\063\063" +
    "\062\064\056\066\073\001\002\000\072\002\ufff0\004\ufff0" +
    "\005\ufff0\011\ufff0\013\ufff0\016\ufff0\023\ufff0\024\ufff0\030" +
    "\ufff0\032\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\066\ufff0" +
    "\001\002\000\032\034\044\035\032\036\027\037\024\040" +
    "\040\041\031\042\012\061\036\065\053\067\020\070\051" +
    "\071\025\001\002\000\016\057\076\060\057\061\060\062" +
    "\063\063\062\064\056\001\002\000\032\034\044\035\032" +
    "\036\027\037\024\040\040\041\031\042\012\061\036\065" +
    "\053\067\020\070\051\071\025\001\002\000\016\057\100" +
    "\060\057\061\060\062\063\063\062\064\056\001\002\000" +
    "\032\034\044\035\032\036\027\037\024\040\040\041\031" +
    "\042\012\061\036\065\053\067\020\070\051\071\025\001" +
    "\002\000\016\060\057\061\060\062\063\063\062\064\056" +
    "\066\102\001\002\000\072\002\uffea\004\uffea\005\uffea\011" +
    "\uffea\013\uffea\016\uffea\023\uffea\024\uffea\030\uffea\032\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea" +
    "\061\uffea\062\uffea\063\uffea\064\uffea\066\uffea\001\002\000" +
    "\032\034\044\035\032\036\027\037\024\040\040\041\031" +
    "\042\012\061\036\065\053\067\020\070\051\071\025\001" +
    "\002\000\016\057\105\060\057\061\060\062\063\063\062" +
    "\064\056\001\002\000\032\034\044\035\032\036\027\037" +
    "\024\040\040\041\031\042\012\061\036\065\053\067\020" +
    "\070\051\071\025\001\002\000\016\060\057\061\060\062" +
    "\063\063\062\064\056\066\107\001\002\000\072\002\uffef" +
    "\004\uffef\005\uffef\011\uffef\013\uffef\016\uffef\023\uffef\024" +
    "\uffef\030\uffef\032\uffef\044\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\066\uffef\001\002\000\006\013\111\056\046\001\002\000" +
    "\014\002\uffd2\011\uffd2\013\uffd2\030\uffd2\056\uffd2\001\002" +
    "\000\032\034\044\035\032\036\027\037\024\040\040\041" +
    "\031\042\012\061\036\065\053\067\020\070\051\071\025" +
    "\001\002\000\016\060\057\061\060\062\063\063\062\064" +
    "\056\066\114\001\002\000\014\002\uffc1\011\uffc1\013\uffc1" +
    "\030\uffc1\056\uffc1\001\002\000\036\044\135\045\141\046" +
    "\136\047\137\050\132\051\140\052\130\053\131\060\057" +
    "\061\060\062\063\063\062\064\056\066\055\001\002\000" +
    "\040\006\116\007\117\010\122\034\044\035\032\036\027" +
    "\037\024\040\040\041\031\042\012\061\036\065\120\067" +
    "\020\070\051\071\025\001\002\000\012\004\uffe1\005\uffe1" +
    "\016\uffe1\066\uffe1\001\002\000\040\006\116\007\117\010" +
    "\122\034\044\035\032\036\027\037\024\040\040\041\031" +
    "\042\012\061\036\065\120\067\020\070\051\071\025\001" +
    "\002\000\010\004\124\005\125\066\123\001\002\000\012" +
    "\004\uffe0\005\uffe0\016\uffe0\066\uffe0\001\002\000\004\021" +
    "\145\001\002\000\040\006\116\007\117\010\122\034\044" +
    "\035\032\036\027\037\024\040\040\041\031\042\012\061" +
    "\036\065\120\067\020\070\051\071\025\001\002\000\040" +
    "\006\116\007\117\010\122\034\044\035\032\036\027\037" +
    "\024\040\040\041\031\042\012\061\036\065\120\067\020" +
    "\070\051\071\025\001\002\000\034\044\135\045\141\046" +
    "\136\047\137\050\132\051\140\052\130\053\131\060\057" +
    "\061\060\062\063\063\062\064\056\001\002\000\012\004" +
    "\uffdc\005\uffdc\016\uffdc\066\uffdc\001\002\000\032\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\061" +
    "\uffe3\065\uffe3\067\uffe3\070\uffe3\071\uffe3\001\002\000\032" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\061\uffe2\065\uffe2\067\uffe2\070\uffe2\071\uffe2\001\002" +
    "\000\032\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\061\uffe5\065\uffe5\067\uffe5\070\uffe5\071\uffe5" +
    "\001\002\000\032\034\044\035\032\036\027\037\024\040" +
    "\040\041\031\042\012\061\036\065\053\067\020\070\051" +
    "\071\025\001\002\000\032\034\044\035\032\036\027\037" +
    "\024\040\040\041\031\042\012\061\036\065\053\067\020" +
    "\070\051\071\025\001\002\000\032\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\061\uffe9\065\uffe9" +
    "\067\uffe9\070\uffe9\071\uffe9\001\002\000\032\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\061\uffe7" +
    "\065\uffe7\067\uffe7\070\uffe7\071\uffe7\001\002\000\032\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\061\uffe6\065\uffe6\067\uffe6\070\uffe6\071\uffe6\001\002\000" +
    "\032\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\061\uffe4\065\uffe4\067\uffe4\070\uffe4\071\uffe4\001" +
    "\002\000\032\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\061\uffe8\065\uffe8\067\uffe8\070\uffe8\071" +
    "\uffe8\001\002\000\024\004\uffdb\005\uffdb\016\uffdb\060\057" +
    "\061\060\062\063\063\062\064\056\066\uffdb\001\002\000" +
    "\024\004\uffda\005\uffda\016\uffda\060\057\061\060\062\063" +
    "\063\062\064\056\066\uffda\001\002\000\012\004\uffdd\005" +
    "\uffdd\016\uffdd\066\uffdd\001\002\000\046\012\023\014\004" +
    "\015\015\025\005\026\030\033\021\034\044\035\032\036" +
    "\027\037\024\040\040\041\031\042\012\061\036\065\017" +
    "\067\020\070\006\071\025\001\002\000\014\002\uffcb\011" +
    "\uffcb\013\uffcb\030\uffcb\056\uffcb\001\002\000\014\002\uffc2" +
    "\011\150\013\uffc2\030\uffc2\056\uffc2\001\002\000\046\012" +
    "\023\014\004\015\015\025\005\026\030\033\021\034\044" +
    "\035\032\036\027\037\024\040\040\041\031\042\012\061" +
    "\036\065\017\067\020\070\006\071\025\001\002\000\014" +
    "\002\uffcc\011\uffcc\013\uffcc\030\uffcc\056\uffcc\001\002\000" +
    "\010\004\124\005\125\066\153\001\002\000\012\004\uffdf" +
    "\005\uffdf\016\uffdf\066\uffdf\001\002\000\012\004\uffde\005" +
    "\uffde\016\uffde\066\uffde\001\002\000\004\002\001\001\002" +
    "\000\010\004\124\005\125\016\157\001\002\000\004\027" +
    "\160\001\002\000\046\012\023\014\004\015\015\025\005" +
    "\026\030\033\021\034\044\035\032\036\027\037\024\040" +
    "\040\041\031\042\012\061\036\065\017\067\020\070\006" +
    "\071\025\001\002\000\006\011\150\030\162\001\002\000" +
    "\020\002\uffca\011\uffca\013\uffca\017\164\020\163\030\uffca" +
    "\056\uffca\001\002\000\040\006\116\007\117\010\122\034" +
    "\044\035\032\036\027\037\024\040\040\041\031\042\012" +
    "\061\036\065\120\067\020\070\051\071\025\001\002\000" +
    "\004\016\201\001\002\000\020\002\uffc8\011\uffc8\013\uffc8" +
    "\017\167\020\166\030\uffc8\056\uffc8\001\002\000\040\006" +
    "\116\007\117\010\122\034\044\035\032\036\027\037\024" +
    "\040\040\041\031\042\012\061\036\065\120\067\020\070" +
    "\051\071\025\001\002\000\004\016\170\001\002\000\004" +
    "\027\171\001\002\000\046\012\023\014\004\015\015\025" +
    "\005\026\030\033\021\034\044\035\032\036\027\037\024" +
    "\040\040\041\031\042\012\061\036\065\017\067\020\070" +
    "\006\071\025\001\002\000\006\011\150\030\173\001\002" +
    "\000\014\002\uffc7\011\uffc7\013\uffc7\030\uffc7\056\uffc7\001" +
    "\002\000\010\004\124\005\125\016\175\001\002\000\004" +
    "\027\176\001\002\000\046\012\023\014\004\015\015\025" +
    "\005\026\030\033\021\034\044\035\032\036\027\037\024" +
    "\040\040\041\031\042\012\061\036\065\017\067\020\070" +
    "\006\071\025\001\002\000\006\011\150\030\200\001\002" +
    "\000\020\002\uffc6\011\uffc6\013\uffc6\017\uffc6\020\uffc6\030" +
    "\uffc6\056\uffc6\001\002\000\004\027\202\001\002\000\046" +
    "\012\023\014\004\015\015\025\005\026\030\033\021\034" +
    "\044\035\032\036\027\037\024\040\040\041\031\042\012" +
    "\061\036\065\017\067\020\070\006\071\025\001\002\000" +
    "\006\011\150\030\204\001\002\000\014\002\uffc9\011\uffc9" +
    "\013\uffc9\030\uffc9\056\uffc9\001\002\000\010\004\124\005" +
    "\125\016\206\001\002\000\004\027\207\001\002\000\046" +
    "\012\023\014\004\015\015\025\005\026\030\033\021\034" +
    "\044\035\032\036\027\037\024\040\040\041\031\042\012" +
    "\061\036\065\017\067\020\070\006\071\025\001\002\000" +
    "\006\011\150\030\211\001\002\000\020\002\uffc5\011\uffc5" +
    "\013\uffc5\017\uffc5\020\uffc5\030\uffc5\056\uffc5\001\002\000" +
    "\032\034\044\035\032\036\027\037\024\040\040\041\031" +
    "\042\012\061\036\065\053\067\020\070\051\071\025\001" +
    "\002\000\006\057\215\066\216\001\002\000\020\057\ufff6" +
    "\060\057\061\060\062\063\063\062\064\056\066\ufff6\001" +
    "\002\000\032\034\044\035\032\036\027\037\024\040\040" +
    "\041\031\042\012\061\036\065\053\067\020\070\051\071" +
    "\025\001\002\000\072\002\ufff5\004\ufff5\005\ufff5\011\ufff5" +
    "\013\ufff5\016\ufff5\023\ufff5\024\ufff5\030\ufff5\032\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\066\ufff5\001\002\000\020" +
    "\057\ufff7\060\057\061\060\062\063\063\062\064\056\066" +
    "\ufff7\001\002\000\032\034\044\035\032\036\027\037\024" +
    "\040\040\041\031\042\012\061\036\065\053\067\020\070" +
    "\051\071\025\001\002\000\004\070\222\001\002\000\004" +
    "\031\223\001\002\000\004\027\224\001\002\000\046\012" +
    "\023\014\004\015\015\025\005\026\030\033\021\034\044" +
    "\035\032\036\027\037\024\040\040\041\031\042\012\061" +
    "\036\065\017\067\020\070\006\071\025\001\002\000\006" +
    "\011\150\056\226\001\002\000\032\034\044\035\032\036" +
    "\027\037\024\040\040\041\031\042\012\061\036\065\053" +
    "\067\020\070\051\071\025\001\002\000\004\030\232\001" +
    "\002\000\016\032\231\060\057\061\060\062\063\063\062" +
    "\064\056\001\002\000\004\030\uffbb\001\002\000\014\002" +
    "\uffbe\011\uffbe\013\uffbe\030\uffbe\056\uffbe\001\002\000\020" +
    "\023\uffbd\057\uffbd\060\057\061\060\062\063\063\062\064" +
    "\056\001\002\000\032\034\044\035\032\036\027\037\024" +
    "\040\040\041\031\042\012\061\036\065\053\067\020\070" +
    "\051\071\025\001\002\000\032\034\044\035\032\036\027" +
    "\037\024\040\040\041\031\042\012\061\036\065\053\067" +
    "\020\070\051\071\025\001\002\000\026\002\uffcd\011\uffcd" +
    "\013\uffcd\030\uffcd\056\uffcd\060\057\061\060\062\063\063" +
    "\062\064\056\001\002\000\016\023\240\060\057\061\060" +
    "\062\063\063\062\064\056\001\002\000\032\034\044\035" +
    "\032\036\027\037\024\040\040\041\031\042\012\061\036" +
    "\065\053\067\020\070\051\071\025\001\002\000\016\024" +
    "\242\060\057\061\060\062\063\063\062\064\056\001\002" +
    "\000\032\034\044\035\032\036\027\037\024\040\040\041" +
    "\031\042\012\061\036\065\053\067\020\070\051\071\025" +
    "\001\002\000\020\054\245\055\244\060\057\061\060\062" +
    "\063\063\062\064\056\001\002\000\046\012\023\014\004" +
    "\015\015\025\005\026\030\033\021\034\044\035\032\036" +
    "\027\037\024\040\040\041\031\042\012\061\036\065\017" +
    "\067\020\070\006\071\025\001\002\000\046\012\023\014" +
    "\004\015\015\025\005\026\030\033\021\034\044\035\032" +
    "\036\027\037\024\040\040\041\031\042\012\061\036\065" +
    "\017\067\020\070\006\071\025\001\002\000\014\002\uffc4" +
    "\011\150\013\uffc4\030\uffc4\056\uffc4\001\002\000\014\002" +
    "\uffc3\011\150\013\uffc3\030\uffc3\056\uffc3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\042\002\006\003\021\004\034\006\010\015" +
    "\012\016\041\021\033\022\042\023\040\024\032\025\044" +
    "\026\036\027\025\030\013\031\015\033\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\125\003\021\004\034\005\155\006\010\001\001\000" +
    "\002\001\001\000\014\002\114\003\021\004\034\005\120" +
    "\006\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\002\006\003\021\004\034\006\010" +
    "\015\012\016\107\021\033\022\042\023\040\024\032\025" +
    "\044\026\036\027\025\030\013\033\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\067\003\021\004\034\006\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\006\003\021\004\034\006\010\015\046\021" +
    "\033\022\042\023\040\024\032\025\044\026\036\027\025" +
    "\030\013\033\007\001\001\000\002\001\001\000\012\002" +
    "\051\003\021\004\034\006\010\001\001\000\002\001\001" +
    "\000\004\012\060\001\001\000\012\002\053\003\021\004" +
    "\034\006\010\001\001\000\004\012\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\063\003\021\004\034\006\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\060\001" +
    "\001\000\012\002\065\003\021\004\034\006\010\001\001" +
    "\000\004\012\060\001\001\000\002\001\001\000\004\012" +
    "\060\001\001\000\012\002\071\003\021\004\034\006\010" +
    "\001\001\000\004\012\060\001\001\000\002\001\001\000" +
    "\012\002\074\003\021\004\034\006\010\001\001\000\004" +
    "\012\060\001\001\000\012\002\076\003\021\004\034\006" +
    "\010\001\001\000\004\012\060\001\001\000\012\002\100" +
    "\003\021\004\034\006\010\001\001\000\004\012\060\001" +
    "\001\000\002\001\001\000\012\002\103\003\021\004\034" +
    "\006\010\001\001\000\004\012\060\001\001\000\012\002" +
    "\105\003\021\004\034\006\010\001\001\000\004\012\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\112\003\021\004\034\006\010\001\001" +
    "\000\004\012\060\001\001\000\002\001\001\000\010\012" +
    "\060\013\133\014\132\001\001\000\014\002\125\003\021" +
    "\004\034\005\153\006\010\001\001\000\002\001\001\000" +
    "\014\002\114\003\021\004\034\005\151\006\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\125\003\021\004\034\005\143\006\010\001\001" +
    "\000\014\002\125\003\021\004\034\005\126\006\010\001" +
    "\001\000\010\012\060\013\133\014\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\142\003\021\004\034\006\010\001\001" +
    "\000\012\002\141\003\021\004\034\006\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\060\001\001\000" +
    "\004\012\060\001\001\000\002\001\001\000\040\002\006" +
    "\003\021\004\034\006\010\015\145\021\033\022\042\023" +
    "\040\024\032\025\044\026\036\027\025\030\013\032\146" +
    "\033\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\006\003\021\004\034\006\010\015\150\021\033" +
    "\022\042\023\040\024\032\025\044\026\036\027\025\030" +
    "\013\033\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\006\003\021" +
    "\004\034\006\010\015\145\021\033\022\042\023\040\024" +
    "\032\025\044\026\036\027\025\030\013\032\160\033\007" +
    "\001\001\000\002\001\001\000\004\020\164\001\001\000" +
    "\014\002\125\003\021\004\034\005\204\006\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\125\003" +
    "\021\004\034\005\173\006\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\002\006\003\021\004\034\006" +
    "\010\015\145\021\033\022\042\023\040\024\032\025\044" +
    "\026\036\027\025\030\013\032\171\033\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\002\006\003\021\004\034\006\010\015" +
    "\145\021\033\022\042\023\040\024\032\025\044\026\036" +
    "\027\025\030\013\032\176\033\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\002\006" +
    "\003\021\004\034\006\010\015\145\021\033\022\042\023" +
    "\040\024\032\025\044\026\036\027\025\030\013\032\202" +
    "\033\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\006\003\021" +
    "\004\034\006\010\015\145\021\033\022\042\023\040\024" +
    "\032\025\044\026\036\027\025\030\013\032\207\033\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\213\003\021\004\034\006\010\017\212\001\001\000\002" +
    "\001\001\000\004\012\060\001\001\000\012\002\216\003" +
    "\021\004\034\006\010\001\001\000\002\001\001\000\004" +
    "\012\060\001\001\000\012\002\232\003\021\004\034\006" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\002\006\003\021\004\034\006\010\015" +
    "\145\021\033\022\042\023\040\024\032\025\044\026\036" +
    "\027\025\030\013\032\224\033\007\001\001\000\002\001" +
    "\001\000\014\002\227\003\021\004\034\006\010\011\226" +
    "\001\001\000\002\001\001\000\004\012\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\060\001\001" +
    "\000\012\002\236\003\021\004\034\006\010\001\001\000" +
    "\012\002\235\003\021\004\034\006\010\001\001\000\004" +
    "\012\060\001\001\000\004\012\060\001\001\000\012\002" +
    "\240\003\021\004\034\006\010\001\001\000\004\012\060" +
    "\001\001\000\012\002\242\003\021\004\034\006\010\001" +
    "\001\000\004\012\060\001\001\000\040\002\006\003\021" +
    "\004\034\006\010\015\145\021\033\022\042\023\040\024" +
    "\032\025\044\026\036\027\025\030\013\032\246\033\007" +
    "\001\001\000\040\002\006\003\021\004\034\006\010\015" +
    "\145\021\033\022\042\023\040\024\032\025\044\026\036" +
    "\027\025\030\013\032\245\033\007\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Main start_val = (Main)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // num_op ::= PLUS 
            {
              Operator RESULT =null;
		 RESULT = new PlusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // num_op ::= MINUS 
            {
              Operator RESULT =null;
		 RESULT = new MinusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // num_op ::= TIMES 
            {
              Operator RESULT =null;
		 RESULT = new TimesOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // num_op ::= DIVIDE 
            {
              Operator RESULT =null;
		 RESULT = new DivideOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // num_op ::= MODE 
            {
              Operator RESULT =null;
		 RESULT = new ModeOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= num_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= str_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= list_stat 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_content ::= list_content COMMA expr 
            {
              ListContent RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListContent a = (ListContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(e); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_content",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_content ::= expr 
            {
              ListContent RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListContent(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_content",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_stat ::= LIST LPAREN list_content RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListContent e = (ListContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new ListExpr(e.getExpr());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stat",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // num_expr ::= NUM 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new IntExpression(e.intValue());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // num_expr ::= READINT 
            {
              Expr RESULT =null;
		
                    RESULT = new IntEnterExpression();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // num_expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new UMinusExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // num_expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new PIntExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // num_expr ::= LENGTH LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRLengthExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // num_expr ::= POSITION LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRPositionExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // num_expr ::= expr num_op expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator o = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new OperatorExpression(e, o, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new StringExpression(s.substring(1, s.length()-1));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_expr ::= READSTR 
            {
              Expr RESULT =null;
		
                    RESULT = new StrEnterExpression();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // str_expr ::= CONCATENATE LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ConcatStringExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // str_expr ::= SUBSTRING LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr pos = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr length = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new SubStringExpression(s, pos, length);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // num_rel ::= EQ 
            {
              Condition RESULT =null;
		 RESULT = new EqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // num_rel ::= LT 
            {
              Condition RESULT =null;
		 RESULT = new LtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // num_rel ::= LE 
            {
              Condition RESULT =null;
		 RESULT = new LeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // num_rel ::= GT 
            {
              Condition RESULT =null;
		 RESULT = new GtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // num_rel ::= GE 
            {
              Condition RESULT =null;
		 RESULT = new GeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // num_rel ::= NE 
            {
              Condition RESULT =null;
		 RESULT = new NeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // str_rel ::= STREQ 
            {
              Condition RESULT =null;
		 RESULT = new EqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // str_rel ::= STRNOTEQ 
            {
              Condition RESULT =null;
		 RESULT = new StrNotEqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool_expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bool_expr ::= LPAREN bool_expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bool_expr ::= NOT bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NegationBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_expr ::= bool_expr AND bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bool_expr ::= bool_expr OR bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bool_expr ::= expr num_rel expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(e, o, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bool_expr ::= expr str_rel expr 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(s, o, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_instr ::= assign_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_instr ::= if_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_instr ::= break_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_instr ::= continue_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_instr ::= while_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_instr ::= for_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_instr ::= function_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_instr ::= BEGIN instr END 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstructionList si = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BeginEndInstruction(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_instr ::= output_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_instr ::= EXIT 
            {
              SimpleInstruction RESULT =null;
		 System.exit(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instr ::= instr SEMI simple_instr 
            {
              InstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(si); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instr ::= simple_instr 
            {
              InstructionList RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstructionList(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assign_stat ::= IDENT ASSIGN expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignInstruction(i,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // recursive ::= recursive SONRA simple_instr 
            {
              Recursive RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Recursive i = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(si); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // recursive ::= simple_instr 
            {
              Recursive RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Recursive(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if_stat ::= EGER bool_expr ISE LCURLY recursive RCURLY 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfInstruction(c, s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_stat ::= EGER bool_expr ISE LCURLY recursive RCURLY DEGIL ISE LCURLY recursive RCURLY 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Recursive s2 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseIfInstruction(c, s.getSimplein(), s2.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_stat ::= EGER bool_expr ISE LCURLY recursive RCURLY if_content 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseInstruction(c, s.getSimplein(), cont.getExpr(), cont.getSimpleinsList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_stat ::= EGER bool_expr ISE LCURLY recursive RCURLY if_content DEGIL ISE LCURLY recursive RCURLY 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Recursive s3 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ElseInstruction(c, s.getSimplein(), cont.getExpr(), cont.getSimpleinsList(), s3.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_content ::= if_content YADA bool_expr ISE LCURLY recursive RCURLY 
            {
              ElseIfContent RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Recursive s2 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cont.add(c2,s2.getSimplein()); RESULT = cont;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_content",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_content ::= YADA bool_expr ISE LCURLY recursive RCURLY 
            {
              ElseIfContent RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Recursive s2 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ElseIfContent(c2, s2.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_content",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // for_stat ::= IDENT DEGIS expr ILE expr ARASINDA expr ART recursive 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForInstruction(i,e,e2,e3,s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for_stat ::= IDENT DEGIS expr ILE expr ARASINDA expr AZ recursive 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForInstruction2(i,e,e2,e3,s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while_stat ::= LPAREN bool_expr RPAREN WHILE recursive 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileInstruction(c, s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // output_stat ::= YAZ LPAREN expr RPAREN 
            {
              SimpleInstruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OutputInstruction(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // break_stat ::= BREAK 
            {
              SimpleInstruction RESULT =null;
		 RESULT = new BreakInstruction(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // continue_stat ::= CONTINUE 
            {
              SimpleInstruction RESULT =null;
		 RESULT = new ContinueInstruction(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue_stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // function_stat ::= recursive_id ILE IDENT FUNCTION LCURLY recursive SEMI return_function RCURLY 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		RecursiveID i = (RecursiveID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Recursive si = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionInstruction(i.getSimplein() , e , si.getSimplein(), r ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // recursive_id ::= recursive_id COMMA expr 
            {
              RecursiveID RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RecursiveID a = (RecursiveID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(e); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive_id",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // recursive_id ::= expr 
            {
              RecursiveID RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RecursiveID(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive_id",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // return_function ::= expr RETURN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnInstruction(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_function",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // program ::= instr 
            {
              Main RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Main program = new Main(i);
            program.exec();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
