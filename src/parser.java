
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\017\005\000\002\017\003\000\002" +
    "\006\006\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\005\000\002\003\006\000\002\003\010" +
    "\000\002\003\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\010\000\002\004\012\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\014\003\000\002\014\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\005\000\002\015\003\000\002" +
    "\015\003\000\002\016\005\000\002\016\003\000\002\023" +
    "\005\000\002\034\005\000\002\034\003\000\002\024\010" +
    "\000\002\024\015\000\002\024\011\000\002\024\016\000" +
    "\002\020\011\000\002\020\010\000\002\026\013\000\002" +
    "\026\013\000\002\027\011\000\002\025\007\000\002\030" +
    "\006\000\002\021\003\000\002\022\003\000\002\031\013" +
    "\000\002\035\005\000\002\035\003\000\002\011\004\000" +
    "\002\032\005\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\046\012\023\014\025\015\034\031\017\032" +
    "\031\037\030\040\013\041\045\042\035\043\010\044\012" +
    "\045\007\046\037\065\020\071\015\073\024\074\032\075" +
    "\042\001\002\000\004\002\257\001\002\000\014\002\uffd4" +
    "\011\uffd4\013\uffd4\034\uffd4\062\uffd4\001\002\000\014\002" +
    "\uffcf\011\uffcf\013\uffcf\034\uffcf\062\uffcf\001\002\000\004" +
    "\071\250\001\002\000\076\002\uffec\004\uffec\005\uffec\011" +
    "\uffec\013\uffec\016\uffec\023\uffec\024\uffec\025\uffec\034\uffec" +
<<<<<<< HEAD
    "\036\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec" +
    "\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\072\uffec\001" +
    "\002\000\006\002\uffb6\062\217\001\002\000\004\071\243" +
    "\001\002\000\074\002\ufff3\004\ufff3\005\ufff3\011\ufff3\013" +
    "\ufff3\016\ufff3\023\ufff3\024\ufff3\025\ufff3\034\ufff3\036\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\067\ufff3\070\ufff3\072\ufff3\001\002\000" +
    "\014\002\uffd7\011\uffd7\013\uffd7\034\uffd7\062\uffd7\001\002" +
    "\000\040\006\113\007\114\010\117\040\013\041\045\042" +
    "\035\043\010\044\012\045\007\046\037\065\020\071\115" +
    "\073\024\074\051\075\042\001\002\000\006\023\224\063" +
    "\223\001\002\000\014\002\uffbc\011\uffbc\013\uffbc\034\uffbc" +
    "\062\uffbc\001\002\000\032\040\013\041\045\042\035\043" +
    "\010\044\012\045\007\046\037\065\020\071\053\073\024" +
    "\074\051\075\042\001\002\000\074\002\ufff8\004\ufff8\005" +
    "\ufff8\011\ufff8\013\ufff8\016\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\034\ufff8\036\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\072" +
    "\ufff8\001\002\000\014\002\uffd9\011\uffd9\013\uffd9\034\uffd9" +
    "\062\uffd9\001\002\000\046\012\023\014\025\015\034\031" +
    "\017\032\031\037\030\040\013\041\045\042\035\043\010" +
    "\044\012\045\007\046\037\065\020\071\015\073\024\074" +
    "\032\075\042\001\002\000\074\002\ufff4\004\ufff4\005\ufff4" +
    "\011\ufff4\013\ufff4\016\ufff4\023\ufff4\024\ufff4\025\ufff4\034" +
    "\ufff4\036\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\072\ufff4" +
    "\001\002\000\014\002\uffce\011\uffce\013\uffce\034\uffce\062" +
    "\uffce\001\002\000\014\002\uffd5\011\uffd5\013\uffd5\034\uffd5" +
    "\062\uffd5\001\002\000\014\002\uffd3\011\uffd3\013\uffd3\034" +
    "\uffd3\062\uffd3\001\002\000\004\071\213\001\002\000\014" +
    "\002\uffbd\011\uffbd\013\uffbd\034\uffbd\062\uffbd\001\002\000" +
    "\026\022\177\023\ufffb\025\ufffb\047\200\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\067\ufffb\070\ufffb\001\002\000\014\002" +
    "\uffd2\011\uffd2\013\uffd2\034\uffd2\062\uffd2\001\002\000\040" +
    "\006\113\007\114\010\117\040\013\041\045\042\035\043" +
    "\010\044\012\045\007\046\037\065\020\071\115\073\024" +
    "\074\051\075\042\001\002\000\004\071\105\001\002\000" +
    "\014\002\uffd1\011\uffd1\013\uffd1\034\uffd1\062\uffd1\001\002" +
    "\000\004\071\077\001\002\000\014\002\uffd8\011\uffd8\013" +
    "\uffd8\034\uffd8\062\uffd8\001\002\000\022\023\uffb9\025\066" +
    "\063\uffb9\064\057\065\060\066\063\067\062\070\056\001" +
    "\002\000\074\002\uffed\004\uffed\005\uffed\011\uffed\013\uffed" +
    "\016\uffed\023\uffed\024\uffed\025\uffed\034\uffed\036\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\070\uffed\072\uffed\001\002\000\074" +
    "\002\ufff9\004\ufff9\005\ufff9\011\ufff9\013\ufff9\016\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\034\ufff9\036\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\072\ufff9\001\002\000\010\002\uffcc\013" +
    "\uffcc\062\uffcc\001\002\000\004\071\050\001\002\000\074" +
    "\002\ufffa\004\ufffa\005\ufffa\011\ufffa\013\ufffa\016\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\034\ufffa\036\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\070\ufffa\072\ufffa\001\002\000\014\002\uffd6\011" +
    "\uffd6\013\uffd6\034\uffd6\062\uffd6\001\002\000\032\040\013" +
=======
    "\035\uffec\036\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec" +
    "\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\072" +
    "\uffec\001\002\000\006\002\uffb6\062\217\001\002\000\004" +
    "\071\243\001\002\000\076\002\ufff3\004\ufff3\005\ufff3\011" +
    "\ufff3\013\ufff3\016\ufff3\023\ufff3\024\ufff3\025\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\072" +
    "\ufff3\001\002\000\014\002\uffd7\011\uffd7\013\uffd7\034\uffd7" +
    "\062\uffd7\001\002\000\040\006\113\007\114\010\117\040" +
    "\013\041\045\042\035\043\010\044\012\045\007\046\037" +
    "\065\020\071\115\073\024\074\051\075\042\001\002\000" +
    "\006\023\224\063\223\001\002\000\014\002\uffbc\011\uffbc" +
    "\013\uffbc\034\uffbc\062\uffbc\001\002\000\032\040\013\041" +
    "\045\042\035\043\010\044\012\045\007\046\037\065\020" +
    "\071\053\073\024\074\051\075\042\001\002\000\076\002" +
    "\ufff8\004\ufff8\005\ufff8\011\ufff8\013\ufff8\016\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\034\ufff8\035\ufff8\036\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066" +
    "\ufff8\067\ufff8\070\ufff8\072\ufff8\001\002\000\014\002\uffd9" +
    "\011\uffd9\013\uffd9\034\uffd9\062\uffd9\001\002\000\046\012" +
    "\023\014\025\015\034\031\017\032\031\037\030\040\013" +
>>>>>>> 649684672f853d73c4e5283ee0f684c11b3e1d93
    "\041\045\042\035\043\010\044\012\045\007\046\037\065" +
    "\020\071\015\073\024\074\032\075\042\001\002\000\076" +
    "\002\ufff4\004\ufff4\005\ufff4\011\ufff4\013\ufff4\016\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\034\ufff4\035\ufff4\036\ufff4\050\ufff4" +
    "\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\067\ufff4\070\ufff4\072\ufff4\001\002\000\014\002" +
    "\uffce\011\uffce\013\uffce\034\uffce\062\uffce\001\002\000\014" +
    "\002\uffd5\011\uffd5\013\uffd5\034\uffd5\062\uffd5\001\002\000" +
    "\014\002\uffd3\011\uffd3\013\uffd3\034\uffd3\062\uffd3\001\002" +
    "\000\004\071\213\001\002\000\014\002\uffbd\011\uffbd\013" +
    "\uffbd\034\uffbd\062\uffbd\001\002\000\026\022\177\023\ufffb" +
    "\025\ufffb\047\200\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067" +
    "\ufffb\070\ufffb\001\002\000\014\002\uffd2\011\uffd2\013\uffd2" +
    "\034\uffd2\062\uffd2\001\002\000\040\006\113\007\114\010" +
    "\117\040\013\041\045\042\035\043\010\044\012\045\007" +
    "\046\037\065\020\071\115\073\024\074\051\075\042\001" +
    "\002\000\004\071\105\001\002\000\014\002\uffd1\011\uffd1" +
    "\013\uffd1\034\uffd1\062\uffd1\001\002\000\004\071\077\001" +
    "\002\000\014\002\uffd8\011\uffd8\013\uffd8\034\uffd8\062\uffd8" +
    "\001\002\000\022\023\uffb9\025\066\063\uffb9\064\057\065" +
    "\060\066\063\067\062\070\056\001\002\000\076\002\uffed" +
    "\004\uffed\005\uffed\011\uffed\013\uffed\016\uffed\023\uffed\024" +
    "\uffed\025\uffed\034\uffed\035\uffed\036\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed" +
    "\067\uffed\070\uffed\072\uffed\001\002\000\076\002\ufff9\004" +
    "\ufff9\005\ufff9\011\ufff9\013\ufff9\016\ufff9\023\ufff9\024\ufff9" +
    "\025\ufff9\034\ufff9\035\ufff9\036\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\072\ufff9\001\002\000\010\002\uffcc\013\uffcc" +
    "\062\uffcc\001\002\000\004\071\050\001\002\000\076\002" +
    "\ufffa\004\ufffa\005\ufffa\011\ufffa\013\ufffa\016\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\034\ufffa\035\ufffa\036\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\070\ufffa\072\ufffa\001\002\000\014\002\uffd6" +
    "\011\uffd6\013\uffd6\034\uffd6\062\uffd6\001\002\000\032\040" +
    "\013\041\045\042\035\043\010\044\012\045\007\046\037" +
    "\065\020\071\053\073\024\074\051\075\042\001\002\000" +
    "\076\002\ufffb\004\ufffb\005\ufffb\011\ufffb\013\ufffb\016\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\034\ufffb\035\ufffb\036\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\067\ufffb\070\ufffb\072\ufffb\001\002\000\016" +
    "\064\057\065\060\066\063\067\062\070\056\072\065\001" +
    "\002\000\032\040\013\041\045\042\035\043\010\044\012" +
    "\045\007\046\037\065\020\071\053\073\024\074\051\075" +
    "\042\001\002\000\016\064\057\065\060\066\063\067\062" +
    "\070\056\072\055\001\002\000\076\002\ufff1\004\ufff1\005" +
    "\ufff1\011\ufff1\013\ufff1\016\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070" +
    "\ufff1\072\ufff1\001\002\000\032\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\065\ufffc\071\ufffc\073" +
    "\ufffc\074\ufffc\075\ufffc\001\002\000\032\040\000\041\000" +
    "\042\000\043\000\044\000\045\000\046\000\065\000\071" +
    "\000\073\000\074\000\075\000\001\002\000\032\040\uffff" +
    "\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\065" +
    "\uffff\071\uffff\073\uffff\074\uffff\075\uffff\001\002\000\032" +
    "\040\013\041\045\042\035\043\010\044\012\045\007\046" +
    "\037\065\020\071\053\073\024\074\051\075\042\001\002" +
    "\000\032\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\065\ufffd\071\ufffd\073\ufffd\074\ufffd\075\ufffd" +
    "\001\002\000\032\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\065\ufffe\071\ufffe\073\ufffe\074\ufffe" +
    "\075\ufffe\001\002\000\076\002\uffee\004\uffee\005\uffee\011" +
    "\uffee\013\uffee\016\uffee\023\uffee\024\uffee\025\uffee\034\uffee" +
    "\035\uffee\036\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee" +
    "\063\uffee\064\057\065\060\066\063\067\062\070\056\072" +
    "\uffee\001\002\000\076\002\ufff0\004\ufff0\005\ufff0\011\ufff0" +
    "\013\ufff0\016\ufff0\023\ufff0\024\ufff0\025\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\072\ufff0" +
    "\001\002\000\004\026\067\001\002\000\004\074\070\001" +
    "\002\000\004\030\071\001\002\000\004\027\072\001\002" +
    "\000\046\012\023\014\025\015\034\031\017\032\031\037" +
    "\030\040\013\041\045\042\035\043\010\044\012\045\007" +
    "\046\037\065\020\071\015\073\024\074\032\075\042\001" +
    "\002\000\014\002\uffc9\011\uffc9\013\uffc9\034\uffc9\062\uffc9" +
    "\001\002\000\014\002\uffc0\011\075\013\uffc0\034\uffc0\062" +
    "\uffc0\001\002\000\046\012\023\014\025\015\034\031\017" +
    "\032\031\037\030\040\013\041\045\042\035\043\010\044" +
    "\012\045\007\046\037\065\020\071\015\073\024\074\032" +
    "\075\042\001\002\000\014\002\uffca\011\uffca\013\uffca\034" +
    "\uffca\062\uffca\001\002\000\032\040\013\041\045\042\035" +
    "\043\010\044\012\045\007\046\037\065\020\071\053\073" +
    "\024\074\051\075\042\001\002\000\006\063\102\072\103" +
    "\001\002\000\020\063\ufff6\064\057\065\060\066\063\067" +
    "\062\070\056\072\ufff6\001\002\000\032\040\013\041\045" +
    "\042\035\043\010\044\012\045\007\046\037\065\020\071" +
    "\053\073\024\074\051\075\042\001\002\000\076\002\ufff5" +
    "\004\ufff5\005\ufff5\011\ufff5\013\ufff5\016\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\034\ufff5\035\ufff5\036\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\067\ufff5\070\ufff5\072\ufff5\001\002\000\020\063\ufff7\064" +
    "\057\065\060\066\063\067\062\070\056\072\ufff7\001\002" +
    "\000\032\040\013\041\045\042\035\043\010\044\012\045" +
    "\007\046\037\065\020\071\053\073\024\074\051\075\042" +
    "\001\002\000\016\063\107\064\057\065\060\066\063\067" +
    "\062\070\056\001\002\000\032\040\013\041\045\042\035" +
    "\043\010\044\012\045\007\046\037\065\020\071\053\073" +
    "\024\074\051\075\042\001\002\000\016\064\057\065\060" +
    "\066\063\067\062\070\056\072\111\001\002\000\076\002" +
    "\uffef\004\uffef\005\uffef\011\uffef\013\uffef\016\uffef\023\uffef" +
    "\024\uffef\025\uffef\034\uffef\035\uffef\036\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066" +
    "\uffef\067\uffef\070\uffef\072\uffef\001\002\000\034\050\167" +
    "\051\173\052\170\053\171\054\164\055\172\056\162\057" +
    "\163\064\057\065\060\066\063\067\062\070\056\001\002" +
    "\000\040\006\113\007\114\010\117\040\013\041\045\042" +
    "\035\043\010\044\012\045\007\046\037\065\020\071\115" +
    "\073\024\074\051\075\042\001\002\000\012\004\uffe1\005" +
    "\uffe1\016\uffe1\072\uffe1\001\002\000\040\006\113\007\114" +
    "\010\117\040\013\041\045\042\035\043\010\044\012\045" +
    "\007\046\037\065\020\071\115\073\024\074\051\075\042" +
    "\001\002\000\010\004\121\005\122\016\120\001\002\000" +
    "\012\004\uffe0\005\uffe0\016\uffe0\072\uffe0\001\002\000\004" +
    "\033\125\001\002\000\040\006\113\007\114\010\117\040" +
    "\013\041\045\042\035\043\010\044\012\045\007\046\037" +
    "\065\020\071\115\073\024\074\051\075\042\001\002\000" +
    "\040\006\113\007\114\010\117\040\013\041\045\042\035" +
    "\043\010\044\012\045\007\046\037\065\020\071\115\073" +
    "\024\074\051\075\042\001\002\000\012\004\uffdc\005\uffdc" +
    "\016\uffdc\072\uffdc\001\002\000\012\004\uffdd\005\uffdd\016" +
    "\uffdd\072\uffdd\001\002\000\046\012\023\014\025\015\034" +
    "\031\017\032\031\037\030\040\013\041\045\042\035\043" +
    "\010\044\012\045\007\046\037\065\020\071\015\073\024" +
    "\074\032\075\042\001\002\000\006\011\075\034\127\001" +
    "\002\000\020\002\uffc8\011\uffc8\013\uffc8\017\131\020\130" +
    "\034\uffc8\062\uffc8\001\002\000\040\006\113\007\114\010" +
    "\117\040\013\041\045\042\035\043\010\044\012\045\007" +
    "\046\037\065\020\071\115\073\024\074\051\075\042\001" +
    "\002\000\004\016\146\001\002\000\020\002\uffc6\011\uffc6" +
    "\013\uffc6\017\134\020\133\034\uffc6\062\uffc6\001\002\000" +
    "\040\006\113\007\114\010\117\040\013\041\045\042\035" +
    "\043\010\044\012\045\007\046\037\065\020\071\115\073" +
    "\024\074\051\075\042\001\002\000\004\016\135\001\002" +
    "\000\004\033\136\001\002\000\046\012\023\014\025\015" +
    "\034\031\017\032\031\037\030\040\013\041\045\042\035" +
    "\043\010\044\012\045\007\046\037\065\020\071\015\073" +
    "\024\074\032\075\042\001\002\000\006\011\075\034\140" +
    "\001\002\000\014\002\uffc5\011\uffc5\013\uffc5\034\uffc5\062" +
    "\uffc5\001\002\000\010\004\121\005\122\016\142\001\002" +
    "\000\004\033\143\001\002\000\046\012\023\014\025\015" +
    "\034\031\017\032\031\037\030\040\013\041\045\042\035" +
    "\043\010\044\012\045\007\046\037\065\020\071\015\073" +
    "\024\074\032\075\042\001\002\000\006\011\075\034\145" +
    "\001\002\000\020\002\uffc4\011\uffc4\013\uffc4\017\uffc4\020" +
    "\uffc4\034\uffc4\062\uffc4\001\002\000\004\033\147\001\002" +
    "\000\046\012\023\014\025\015\034\031\017\032\031\037" +
    "\030\040\013\041\045\042\035\043\010\044\012\045\007" +
    "\046\037\065\020\071\015\073\024\074\032\075\042\001" +
    "\002\000\006\011\075\034\151\001\002\000\014\002\uffc7" +
    "\011\uffc7\013\uffc7\034\uffc7\062\uffc7\001\002\000\010\004" +
    "\121\005\122\016\153\001\002\000\004\033\154\001\002" +
    "\000\046\012\023\014\025\015\034\031\017\032\031\037" +
    "\030\040\013\041\045\042\035\043\010\044\012\045\007" +
    "\046\037\065\020\071\015\073\024\074\032\075\042\001" +
    "\002\000\006\011\075\034\156\001\002\000\020\002\uffc3" +
    "\011\uffc3\013\uffc3\017\uffc3\020\uffc3\034\uffc3\062\uffc3\001" +
    "\002\000\036\050\167\051\173\052\170\053\171\054\164" +
    "\055\172\056\162\057\163\064\057\065\060\066\063\067" +
    "\062\070\056\072\055\001\002\000\010\004\121\005\122" +
    "\072\161\001\002\000\012\004\uffdf\005\uffdf\016\uffdf\072" +
    "\uffdf\001\002\000\032\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\065\uffe3\071\uffe3\073\uffe3\074" +
    "\uffe3\075\uffe3\001\002\000\032\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\046\uffe2\065\uffe2\071\uffe2\073" +
    "\uffe2\074\uffe2\075\uffe2\001\002\000\032\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\065\uffe5\071" +
    "\uffe5\073\uffe5\074\uffe5\075\uffe5\001\002\000\032\040\013" +
    "\041\045\042\035\043\010\044\012\045\007\046\037\065" +
    "\020\071\053\073\024\074\051\075\042\001\002\000\032" +
    "\040\013\041\045\042\035\043\010\044\012\045\007\046" +
    "\037\065\020\071\053\073\024\074\051\075\042\001\002" +
    "\000\032\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\065\uffe9\071\uffe9\073\uffe9\074\uffe9\075\uffe9" +
    "\001\002\000\032\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\065\uffe7\071\uffe7\073\uffe7\074\uffe7" +
    "\075\uffe7\001\002\000\032\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\065\uffe6\071\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\001\002\000\032\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\065\uffe4\071\uffe4" +
    "\073\uffe4\074\uffe4\075\uffe4\001\002\000\032\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\065\uffe8" +
    "\071\uffe8\073\uffe8\074\uffe8\075\uffe8\001\002\000\024\004" +
    "\uffdb\005\uffdb\016\uffdb\064\057\065\060\066\063\067\062" +
    "\070\056\072\uffdb\001\002\000\024\004\uffda\005\uffda\016" +
    "\uffda\064\057\065\060\066\063\067\062\070\056\072\uffda" +
    "\001\002\000\012\004\uffde\005\uffde\016\uffde\072\uffde\001" +
    "\002\000\032\040\013\041\045\042\035\043\010\044\012" +
    "\045\007\046\037\065\020\071\053\073\024\074\051\075" +
    "\042\001\002\000\032\040\013\041\045\042\035\043\010" +
    "\044\012\045\007\046\037\065\020\071\053\073\024\074" +
    "\051\075\042\001\002\000\026\002\uffcb\011\uffcb\013\uffcb" +
    "\034\uffcb\062\uffcb\064\057\065\060\066\063\067\062\070" +
    "\056\001\002\000\016\023\203\064\057\065\060\066\063" +
    "\067\062\070\056\001\002\000\032\040\013\041\045\042" +
    "\035\043\010\044\012\045\007\046\037\065\020\071\053" +
    "\073\024\074\051\075\042\001\002\000\016\024\205\064" +
    "\057\065\060\066\063\067\062\070\056\001\002\000\032" +
    "\040\013\041\045\042\035\043\010\044\012\045\007\046" +
    "\037\065\020\071\053\073\024\074\051\075\042\001\002" +
    "\000\020\060\207\061\210\064\057\065\060\066\063\067" +
    "\062\070\056\001\002\000\046\012\023\014\025\015\034" +
    "\031\017\032\031\037\030\040\013\041\045\042\035\043" +
    "\010\044\012\045\007\046\037\065\020\071\015\073\024" +
    "\074\032\075\042\001\002\000\046\012\023\014\025\015" +
    "\034\031\017\032\031\037\030\040\013\041\045\042\035" +
    "\043\010\044\012\045\007\046\037\065\020\071\015\073" +
    "\024\074\032\075\042\001\002\000\014\002\uffc1\011\075" +
    "\013\uffc1\034\uffc1\062\uffc1\001\002\000\014\002\uffc2\011" +
    "\075\013\uffc2\034\uffc2\062\uffc2\001\002\000\032\040\013" +
    "\041\045\042\035\043\010\044\012\045\007\046\037\065" +
    "\020\071\053\073\024\074\051\075\042\001\002\000\016" +
    "\064\057\065\060\066\063\067\062\070\056\072\215\001" +
    "\002\000\014\002\uffbe\011\uffbe\013\uffbe\034\uffbe\062\uffbe" +
    "\001\002\000\006\013\220\062\217\001\002\000\046\012" +
    "\023\014\025\015\034\031\017\032\031\037\030\040\013" +
    "\041\045\042\035\043\010\044\012\045\007\046\037\065" +
    "\020\071\015\073\024\074\032\075\042\001\002\000\014" +
    "\002\uffd0\011\uffd0\013\uffd0\034\uffd0\062\uffd0\001\002\000" +
    "\010\002\uffcd\013\uffcd\062\uffcd\001\002\000\076\002\ufff2" +
    "\004\ufff2\005\ufff2\011\ufff2\013\ufff2\016\ufff2\023\ufff2\024" +
<<<<<<< HEAD
    "\ufff2\025\ufff2\034\ufff2\036\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\063\067\062" +
    "\070\056\072\ufff2\001\002\000\032\040\013\041\045\042" +
    "\035\043\010\044\012\045\007\046\037\065\020\071\053" +
    "\073\024\074\051\075\042\001\002\000\004\074\225\001" +
    "\002\000\016\002\uffb7\011\uffb7\013\uffb7\034\uffb7\035\226" +
    "\062\uffb7\001\002\000\004\033\227\001\002\000\046\012" +
    "\023\014\025\015\034\031\017\032\031\037\030\040\013" +
    "\041\045\042\035\043\010\044\012\045\007\046\037\065" +
    "\020\071\015\073\024\074\032\075\042\001\002\000\006" +
    "\011\075\062\231\001\002\000\032\040\013\041\045\042" +
    "\035\043\010\044\012\045\007\046\037\065\020\071\053" +
    "\073\024\074\051\075\042\001\002\000\004\034\235\001" +
    "\002\000\016\036\234\064\057\065\060\066\063\067\062" +
    "\070\056\001\002\000\004\034\uffb8\001\002\000\014\002" +
    "\uffbb\011\uffbb\013\uffbb\034\uffbb\062\uffbb\001\002\000\020" +
    "\023\uffba\063\uffba\064\057\065\060\066\063\067\062\070" +
    "\056\001\002\000\010\004\121\005\122\072\240\001\002" +
    "\000\004\021\241\001\002\000\046\012\023\014\025\015" +
    "\034\031\017\032\031\037\030\040\013\041\045\042\035" +
    "\043\010\044\012\045\007\046\037\065\020\071\015\073" +
    "\024\074\032\075\042\001\002\000\014\002\uffbf\011\075" +
    "\013\uffbf\034\uffbf\062\uffbf\001\002\000\032\040\013\041" +
    "\045\042\035\043\010\044\012\045\007\046\037\065\020" +
    "\071\053\073\024\074\051\075\042\001\002\000\016\063" +
    "\245\064\057\065\060\066\063\067\062\070\056\001\002" +
    "\000\032\040\013\041\045\042\035\043\010\044\012\045" +
    "\007\046\037\065\020\071\053\073\024\074\051\075\042" +
    "\001\002\000\016\064\057\065\060\066\063\067\062\070" +
    "\056\072\247\001\002\000\074\002\uffeb\004\uffeb\005\uffeb" +
    "\011\uffeb\013\uffeb\016\uffeb\023\uffeb\024\uffeb\025\uffeb\034" +
    "\uffeb\036\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\072\uffeb" +
    "\001\002\000\032\040\013\041\045\042\035\043\010\044" +
    "\012\045\007\046\037\065\020\071\053\073\024\074\051" +
    "\075\042\001\002\000\016\063\252\064\057\065\060\066" +
    "\063\067\062\070\056\001\002\000\032\040\013\041\045" +
    "\042\035\043\010\044\012\045\007\046\037\065\020\071" +
    "\053\073\024\074\051\075\042\001\002\000\016\063\254" +
    "\064\057\065\060\066\063\067\062\070\056\001\002\000" +
    "\032\040\013\041\045\042\035\043\010\044\012\045\007" +
    "\046\037\065\020\071\053\073\024\074\051\075\042\001" +
    "\002\000\016\064\057\065\060\066\063\067\062\070\056" +
    "\072\256\001\002\000\074\002\uffea\004\uffea\005\uffea\011" +
    "\uffea\013\uffea\016\uffea\023\uffea\024\uffea\025\uffea\034\uffea" +
    "\036\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea" +
    "\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea\072\uffea\001" +
    "\002\000\004\002\001\001\002" });
=======
    "\ufff2\025\ufff2\034\ufff2\035\ufff2\036\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\063" +
    "\067\062\070\056\072\ufff2\001\002\000\032\040\013\041" +
    "\045\042\035\043\010\044\012\045\007\046\037\065\020" +
    "\071\053\073\024\074\051\075\042\001\002\000\032\040" +
    "\013\041\045\042\035\043\010\044\012\045\007\046\037" +
    "\065\020\071\053\073\024\074\051\075\042\001\002\000" +
    "\030\002\uffb7\011\uffb7\013\uffb7\034\uffb7\035\226\062\uffb7" +
    "\064\057\065\060\066\063\067\062\070\056\001\002\000" +
    "\004\033\227\001\002\000\046\012\023\014\025\015\034" +
    "\031\017\032\031\037\030\040\013\041\045\042\035\043" +
    "\010\044\012\045\007\046\037\065\020\071\015\073\024" +
    "\074\032\075\042\001\002\000\006\011\075\062\231\001" +
    "\002\000\032\040\013\041\045\042\035\043\010\044\012" +
    "\045\007\046\037\065\020\071\053\073\024\074\051\075" +
    "\042\001\002\000\004\034\235\001\002\000\016\036\234" +
    "\064\057\065\060\066\063\067\062\070\056\001\002\000" +
    "\004\034\uffb8\001\002\000\014\002\uffbb\011\uffbb\013\uffbb" +
    "\034\uffbb\062\uffbb\001\002\000\020\023\uffba\063\uffba\064" +
    "\057\065\060\066\063\067\062\070\056\001\002\000\010" +
    "\004\121\005\122\072\240\001\002\000\004\021\241\001" +
    "\002\000\046\012\023\014\025\015\034\031\017\032\031" +
    "\037\030\040\013\041\045\042\035\043\010\044\012\045" +
    "\007\046\037\065\020\071\015\073\024\074\032\075\042" +
    "\001\002\000\014\002\uffbf\011\075\013\uffbf\034\uffbf\062" +
    "\uffbf\001\002\000\032\040\013\041\045\042\035\043\010" +
    "\044\012\045\007\046\037\065\020\071\053\073\024\074" +
    "\051\075\042\001\002\000\016\063\245\064\057\065\060" +
    "\066\063\067\062\070\056\001\002\000\032\040\013\041" +
    "\045\042\035\043\010\044\012\045\007\046\037\065\020" +
    "\071\053\073\024\074\051\075\042\001\002\000\016\064" +
    "\057\065\060\066\063\067\062\070\056\072\247\001\002" +
    "\000\076\002\uffeb\004\uffeb\005\uffeb\011\uffeb\013\uffeb\016" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb" +
    "\065\uffeb\066\uffeb\067\uffeb\070\uffeb\072\uffeb\001\002\000" +
    "\032\040\013\041\045\042\035\043\010\044\012\045\007" +
    "\046\037\065\020\071\053\073\024\074\051\075\042\001" +
    "\002\000\016\063\252\064\057\065\060\066\063\067\062" +
    "\070\056\001\002\000\032\040\013\041\045\042\035\043" +
    "\010\044\012\045\007\046\037\065\020\071\053\073\024" +
    "\074\051\075\042\001\002\000\016\063\254\064\057\065" +
    "\060\066\063\067\062\070\056\001\002\000\032\040\013" +
    "\041\045\042\035\043\010\044\012\045\007\046\037\065" +
    "\020\071\053\073\024\074\051\075\042\001\002\000\016" +
    "\064\057\065\060\066\063\067\062\070\056\072\256\001" +
    "\002\000\076\002\uffea\004\uffea\005\uffea\011\uffea\013\uffea" +
    "\016\uffea\023\uffea\024\uffea\025\uffea\034\uffea\035\uffea\036" +
    "\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\066\uffea\067\uffea\070\uffea\072\uffea\001\002" +
    "\000\004\002\001\001\002" });
>>>>>>> 649684672f853d73c4e5283ee0f684c11b3e1d93

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\046\002\040\003\045\004\042\006\020\015" +
    "\043\016\010\021\013\022\046\023\021\024\037\025\025" +
    "\026\004\027\026\030\005\031\032\032\035\033\003\035" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\156\003\045\004\042\005\236\006\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\221" +
    "\003\045\004\042\006\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\002\040\003\045\004\042\006\020" +
    "\015\043\016\215\021\013\022\046\023\021\024\037\025" +
    "\025\026\004\027\026\030\005\031\032\032\035\035\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\111\003" +
    "\045\004\042\005\115\006\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\051\003\045\004\042\006\020" +
    "\001\001\000\002\001\001\000\004\012\060\001\001\000" +
    "\012\002\053\003\045\004\042\006\020\001\001\000\004" +
    "\012\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\063\003\045" +
    "\004\042\006\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\002\040\003\045\004\042\006\020\015\072" +
    "\021\013\022\046\023\021\024\037\025\025\026\004\027" +
    "\026\030\005\031\032\032\035\034\073\035\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\002\040\003" +
    "\045\004\042\006\020\015\075\021\013\022\046\023\021" +
    "\024\037\025\025\026\004\027\026\030\005\031\032\032" +
    "\035\035\015\001\001\000\002\001\001\000\014\002\100" +
    "\003\045\004\042\006\020\017\077\001\001\000\002\001" +
    "\001\000\004\012\060\001\001\000\012\002\103\003\045" +
    "\004\042\006\020\001\001\000\002\001\001\000\004\012" +
    "\060\001\001\000\012\002\105\003\045\004\042\006\020" +
    "\001\001\000\004\012\060\001\001\000\012\002\107\003" +
    "\045\004\042\006\020\001\001\000\004\012\060\001\001" +
    "\000\002\001\001\000\010\012\060\013\165\014\164\001" +
    "\001\000\014\002\111\003\045\004\042\005\175\006\020" +
    "\001\001\000\002\001\001\000\014\002\156\003\045\004" +
    "\042\005\157\006\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\111\003\045\004" +
    "\042\005\123\006\020\001\001\000\014\002\111\003\045" +
    "\004\042\005\122\006\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\002\040\003\045\004\042\006\020" +
    "\015\072\021\013\022\046\023\021\024\037\025\025\026" +
    "\004\027\026\030\005\031\032\032\035\034\125\035\015" +
    "\001\001\000\002\001\001\000\004\020\131\001\001\000" +
    "\014\002\111\003\045\004\042\005\151\006\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\111\003" +
    "\045\004\042\005\140\006\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\002\040\003\045\004\042\006" +
    "\020\015\072\021\013\022\046\023\021\024\037\025\025" +
    "\026\004\027\026\030\005\031\032\032\035\034\136\035" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\002\040\003\045\004" +
    "\042\006\020\015\072\021\013\022\046\023\021\024\037" +
    "\025\025\026\004\027\026\030\005\031\032\032\035\034" +
    "\143\035\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\002\040\003\045\004\042\006" +
    "\020\015\072\021\013\022\046\023\021\024\037\025\025" +
    "\026\004\027\026\030\005\031\032\032\035\034\147\035" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\002\040\003\045\004" +
    "\042\006\020\015\072\021\013\022\046\023\021\024\037" +
    "\025\025\026\004\027\026\030\005\031\032\032\035\034" +
    "\154\035\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\060\013\165\014\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\174\003\045\004\042\006" +
    "\020\001\001\000\012\002\173\003\045\004\042\006\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\060" +
    "\001\001\000\004\012\060\001\001\000\002\001\001\000" +
    "\012\002\201\003\045\004\042\006\020\001\001\000\012" +
    "\002\200\003\045\004\042\006\020\001\001\000\004\012" +
    "\060\001\001\000\004\012\060\001\001\000\012\002\203" +
    "\003\045\004\042\006\020\001\001\000\004\012\060\001" +
    "\001\000\012\002\205\003\045\004\042\006\020\001\001" +
    "\000\004\012\060\001\001\000\044\002\040\003\045\004" +
    "\042\006\020\015\072\021\013\022\046\023\021\024\037" +
    "\025\025\026\004\027\026\030\005\031\032\032\035\034" +
    "\211\035\015\001\001\000\044\002\040\003\045\004\042" +
    "\006\020\015\072\021\013\022\046\023\021\024\037\025" +
    "\025\026\004\027\026\030\005\031\032\032\035\034\210" +
    "\035\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\213\003\045\004\042\006\020\001\001\000\004" +
    "\012\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\002\040\003\045\004\042\006\020\015\220\021\013" +
    "\022\046\023\021\024\037\025\025\026\004\027\026\030" +
    "\005\031\032\032\035\035\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\060\001\001\000\012\002" +
    "\235\003\045\004\042\006\020\001\001\000\012\002\224" +
    "\003\045\004\042\006\020\001\001\000\004\012\060\001" +
    "\001\000\002\001\001\000\044\002\040\003\045\004\042" +
    "\006\020\015\072\021\013\022\046\023\021\024\037\025" +
    "\025\026\004\027\026\030\005\031\032\032\035\034\227" +
    "\035\015\001\001\000\002\001\001\000\014\002\232\003" +
    "\045\004\042\006\020\011\231\001\001\000\002\001\001" +
    "\000\004\012\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\002\040\003\045\004\042\006\020\015" +
    "\072\021\013\022\046\023\021\024\037\025\025\026\004" +
    "\027\026\030\005\031\032\032\035\034\241\035\015\001" +
    "\001\000\002\001\001\000\012\002\243\003\045\004\042" +
    "\006\020\001\001\000\004\012\060\001\001\000\012\002" +
    "\245\003\045\004\042\006\020\001\001\000\004\012\060" +
    "\001\001\000\002\001\001\000\012\002\250\003\045\004" +
    "\042\006\020\001\001\000\004\012\060\001\001\000\012" +
    "\002\252\003\045\004\042\006\020\001\001\000\004\012" +
    "\060\001\001\000\012\002\254\003\045\004\042\006\020" +
    "\001\001\000\004\012\060\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Main start_val = (Main)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // num_op ::= PLUS 
            {
              Operator RESULT =null;
		 RESULT = new PlusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // num_op ::= MINUS 
            {
              Operator RESULT =null;
		 RESULT = new MinusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // num_op ::= TIMES 
            {
              Operator RESULT =null;
		 RESULT = new TimesOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // num_op ::= DIVIDE 
            {
              Operator RESULT =null;
		 RESULT = new DivideOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // num_op ::= MODE 
            {
              Operator RESULT =null;
		 RESULT = new ModeOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= num_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= str_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= list_stat 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_content ::= list_content COMMA expr 
            {
              ListContent RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListContent a = (ListContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(e); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_content",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_content ::= expr 
            {
              ListContent RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListContent(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_content",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_stat ::= LIST LPAREN list_content RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListContent e = (ListContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new ListExpr(e.getExpr());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stat",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // num_expr ::= NUM 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new IntExpression(e.intValue());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // num_expr ::= READINT 
            {
              Expr RESULT =null;
		
                    RESULT = new IntEnterExpression();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // num_expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new UMinusExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // num_expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new PIntExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // num_expr ::= LENGTH LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRLengthExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // num_expr ::= POSITION LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRPositionExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // num_expr ::= expr num_op expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator o = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new OperatorExpression(e, o, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new StringExpression(s.substring(1, s.length()-1));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_expr ::= READSTR 
            {
              Expr RESULT =null;
		
                    RESULT = new StrEnterExpression();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // str_expr ::= CONCATENATE LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ConcatStringExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // str_expr ::= SUBSTRING LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr pos = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr length = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new SubStringExpression(s, pos, length);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // num_rel ::= EQ 
            {
              Condition RESULT =null;
		 RESULT = new EqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // num_rel ::= LT 
            {
              Condition RESULT =null;
		 RESULT = new LtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // num_rel ::= LE 
            {
              Condition RESULT =null;
		 RESULT = new LeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // num_rel ::= GT 
            {
              Condition RESULT =null;
		 RESULT = new GtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // num_rel ::= GE 
            {
              Condition RESULT =null;
		 RESULT = new GeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // num_rel ::= NE 
            {
              Condition RESULT =null;
		 RESULT = new NeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // str_rel ::= STREQ 
            {
              Condition RESULT =null;
		 RESULT = new EqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // str_rel ::= STRNOTEQ 
            {
              Condition RESULT =null;
		 RESULT = new StrNotEqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool_expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bool_expr ::= LPAREN bool_expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bool_expr ::= NOT bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NegationBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_expr ::= bool_expr AND bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bool_expr ::= bool_expr OR bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bool_expr ::= expr num_rel expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(e, o, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bool_expr ::= expr str_rel expr 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(s, o, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_instr ::= assign_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_instr ::= if_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_instr ::= break_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_instr ::= continue_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_instr ::= while_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_instr ::= for_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_instr ::= foreach_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_instr ::= function_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_instr ::= call_function 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_instr ::= BEGIN instr END 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstructionList si = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BeginEndInstruction(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_instr ::= output_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_instr ::= EXIT 
            {
              SimpleInstruction RESULT =null;
		 System.exit(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instr ::= instr SEMI simple_instr 
            {
              InstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(si); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instr ::= simple_instr 
            {
              InstructionList RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstructionList(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assign_stat ::= IDENT ASSIGN expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignInstruction(i,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // recursive ::= recursive SONRA simple_instr 
            {
              Recursive RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Recursive i = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(si); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // recursive ::= simple_instr 
            {
              Recursive RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Recursive(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_stat ::= EGER bool_expr ISE LCURLY recursive RCURLY 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfInstruction(c, s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_stat ::= EGER bool_expr ISE LCURLY recursive RCURLY DEGIL ISE LCURLY recursive RCURLY 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Recursive s2 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseIfInstruction(c, s.getSimplein(), s2.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_stat ::= EGER bool_expr ISE LCURLY recursive RCURLY if_content 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseInstruction(c, s.getSimplein(), cont.getExpr(), cont.getSimpleinsList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_stat ::= EGER bool_expr ISE LCURLY recursive RCURLY if_content DEGIL ISE LCURLY recursive RCURLY 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Recursive s3 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ElseInstruction(c, s.getSimplein(), cont.getExpr(), cont.getSimpleinsList(), s3.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_content ::= if_content YADA bool_expr ISE LCURLY recursive RCURLY 
            {
              ElseIfContent RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Recursive s2 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cont.add(c2,s2.getSimplein()); RESULT = cont;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_content",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_content ::= YADA bool_expr ISE LCURLY recursive RCURLY 
            {
              ElseIfContent RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Recursive s2 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ElseIfContent(c2, s2.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_content",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for_stat ::= IDENT DEGIS expr ILE expr ARASINDA expr ART recursive 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForInstruction(i,e,e2,e3,s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for_stat ::= IDENT DEGIS expr ILE expr ARASINDA expr AZ recursive 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForInstruction2(i,e,e2,e3,s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // foreach_stat ::= expr INSIDE EVERY IDENT VALUE FOR recursive 
            {
              SimpleInstruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForeachInstruction(e, i, s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foreach_stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // while_stat ::= LPAREN bool_expr RPAREN WHILE recursive 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileInstruction(c, s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // output_stat ::= YAZ LPAREN expr RPAREN 
            {
              SimpleInstruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OutputInstruction(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // break_stat ::= BREAK 
            {
              SimpleInstruction RESULT =null;
		 RESULT = new BreakInstruction(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // continue_stat ::= CONTINUE 
            {
              SimpleInstruction RESULT =null;
		 RESULT = new ContinueInstruction(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue_stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // function_stat ::= recursive_id ILE expr FUNCTION LCURLY recursive SEMI return_function RCURLY 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		RecursiveID i = (RecursiveID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Recursive si = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionInstruction(i.getRecursiveID() , e , si.getSimplein(), r ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // recursive_id ::= recursive_id COMMA expr 
            {
              RecursiveID RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RecursiveID a = (RecursiveID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(e); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive_id",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // recursive_id ::= expr 
            {
              RecursiveID RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RecursiveID(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive_id",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // return_function ::= expr RETURN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnInstruction(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_function",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 74: // call_function ::= recursive_id ILE IDENT 
=======
          case 74: // call_function ::= recursive_id ILE expr 
>>>>>>> 649684672f853d73c4e5283ee0f684c11b3e1d93
            {
              SimpleInstruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RecursiveID e = (RecursiveID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> 649684672f853d73c4e5283ee0f684c11b3e1d93
		 RESULT = new CallFunction(i, e.getRecursiveID()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_function",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // program ::= instr 
            {
              Main RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Main program = new Main(i);
            program.exec();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
