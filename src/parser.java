
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\015\005\000\002\015\003\000\002" +
    "\006\006\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\005\000\002\003\006\000\002\003\010" +
    "\000\002\003\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\010\000\002\004\012\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\005" +
    "\000\002\013\003\000\002\013\003\000\002\014\005\000" +
    "\002\014\003\000\002\017\005\000\002\025\005\000\002" +
    "\025\003\000\002\020\006\000\002\020\011\000\002\020" +
    "\007\000\002\020\012\000\002\016\007\000\002\016\006" +
    "\000\002\022\013\000\002\022\013\000\002\021\007\000" +
    "\002\023\006\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\016\011\017\013\004\014\015\024\014\056" +
    "\020\061\005\001\002\000\016\002\uffd3\012\uffd3\016\uffd3" +
    "\017\uffd3\047\uffd3\051\uffd3\001\002\000\006\021\177\034" +
    "\200\001\002\000\016\002\uffd6\012\uffd6\016\uffd6\017\uffd6" +
    "\047\uffd6\051\uffd6\001\002\000\016\002\uffd4\012\uffd4\016" +
    "\uffd4\017\uffd4\047\uffd4\051\uffd4\001\002\000\016\002\uffd8" +
    "\012\uffd8\016\uffd8\017\uffd8\047\uffd8\051\uffd8\001\002\000" +
    "\004\002\176\001\002\000\016\002\uffd9\012\uffd9\016\uffd9" +
    "\017\uffd9\047\uffd9\051\uffd9\001\002\000\016\002\uffd7\012" +
    "\uffd7\016\uffd7\017\uffd7\047\uffd7\051\uffd7\001\002\000\004" +
    "\056\173\001\002\000\040\006\026\007\027\010\042\025" +
    "\045\026\040\027\036\030\035\031\044\032\037\033\024" +
    "\052\043\056\030\060\032\061\022\062\034\001\002\000" +
    "\006\002\uffc3\047\146\001\002\000\016\011\017\013\004" +
    "\014\015\024\014\056\020\061\005\001\002\000\040\006" +
    "\026\007\027\010\042\025\045\026\040\027\036\030\035" +
    "\031\044\032\037\033\024\052\043\056\030\060\032\061" +
    "\022\062\034\001\002\000\010\002\uffd1\012\uffd1\047\uffd1" +
    "\001\002\000\070\002\ufffb\004\ufffb\005\ufffb\012\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\022\ufffb\023\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\057\ufffb\001\002\000\034\035\127\036" +
    "\133\037\130\040\131\041\124\042\132\043\122\044\123" +
    "\051\054\052\055\053\060\054\057\055\053\001\002\000" +
    "\004\056\137\001\002\000\070\002\ufff8\004\ufff8\005\ufff8" +
    "\012\ufff8\015\ufff8\016\ufff8\017\ufff8\022\ufff8\023\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\055\ufff8\057\ufff8\001\002\000\040" +
    "\006\026\007\027\010\042\025\045\026\040\027\036\030" +
    "\035\031\044\032\037\033\024\052\043\056\030\060\032" +
    "\061\022\062\034\001\002\000\012\004\uffe1\005\uffe1\015" +
    "\uffe1\057\uffe1\001\002\000\040\006\026\007\027\010\042" +
    "\025\045\026\040\027\036\030\035\031\044\032\037\033" +
    "\024\052\043\056\030\060\032\061\022\062\034\001\002" +
    "\000\010\004\106\005\107\057\105\001\002\000\070\002" +
    "\ufff4\004\ufff4\005\ufff4\012\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\022\ufff4\023\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041" +
    "\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\057" +
    "\ufff4\001\002\000\070\002\ufffa\004\ufffa\005\ufffa\012\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\022\ufffa\023\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\057\ufffa\001\002\000\070\002\uffed" +
    "\004\uffed\005\uffed\012\uffed\015\uffed\016\uffed\017\uffed\022" +
    "\uffed\023\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\057\uffed" +
    "\001\002\000\070\002\uffec\004\uffec\005\uffec\012\uffec\015" +
    "\uffec\016\uffec\017\uffec\022\uffec\023\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\057\uffec\001\002\000\004\056\100\001" +
    "\002\000\004\056\071\001\002\000\004\056\066\001\002" +
    "\000\070\002\ufff9\004\ufff9\005\ufff9\012\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\022\ufff9\023\ufff9\035\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046" +
    "\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9" +
    "\055\ufff9\057\ufff9\001\002\000\012\004\uffe0\005\uffe0\015" +
    "\uffe0\057\uffe0\001\002\000\032\025\045\026\040\027\036" +
    "\030\035\031\044\032\037\033\024\052\043\056\050\060" +
    "\032\061\022\062\034\001\002\000\004\056\046\001\002" +
    "\000\070\002\ufff3\004\ufff3\005\ufff3\012\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\022\ufff3\023\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\057\ufff3\001\002\000\032\025\045\026\040\027" +
    "\036\030\035\031\044\032\037\033\024\052\043\056\050" +
    "\060\032\061\022\062\034\001\002\000\016\050\062\051" +
    "\054\052\055\053\060\054\057\055\053\001\002\000\032" +
    "\025\045\026\040\027\036\030\035\031\044\032\037\033" +
    "\024\052\043\056\050\060\032\061\022\062\034\001\002" +
    "\000\016\051\054\052\055\053\060\054\057\055\053\057" +
    "\052\001\002\000\070\002\ufff1\004\ufff1\005\ufff1\012\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\022\ufff1\023\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\057\ufff1\001\002\000\032\025\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\052" +
    "\ufffc\056\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002\000\032" +
    "\025\000\026\000\027\000\030\000\031\000\032\000\033" +
    "\000\052\000\056\000\060\000\061\000\062\000\001\002" +
    "\000\032\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\052\uffff\056\uffff\060\uffff\061\uffff\062\uffff" +
    "\001\002\000\032\025\045\026\040\027\036\030\035\031" +
    "\044\032\037\033\024\052\043\056\050\060\032\061\022" +
    "\062\034\001\002\000\032\025\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\052\ufffd\056\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\001\002\000\032\025\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\052\ufffe\056\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\001\002\000\070\002\uffee\004" +
    "\uffee\005\uffee\012\uffee\015\uffee\016\uffee\017\uffee\022\uffee" +
    "\023\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\051\054\052\055\053\060\054\057\055\053\057\uffee\001" +
    "\002\000\032\025\045\026\040\027\036\030\035\031\044" +
    "\032\037\033\024\052\043\056\050\060\032\061\022\062" +
    "\034\001\002\000\016\051\054\052\055\053\060\054\057" +
    "\055\053\057\064\001\002\000\070\002\uffeb\004\uffeb\005" +
    "\uffeb\012\uffeb\015\uffeb\016\uffeb\017\uffeb\022\uffeb\023\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\057\uffeb\001\002\000" +
    "\070\002\ufff2\004\ufff2\005\ufff2\012\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\022\ufff2\023\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\060\054\057\055" +
    "\053\057\ufff2\001\002\000\032\025\045\026\040\027\036" +
    "\030\035\031\044\032\037\033\024\052\043\056\050\060" +
    "\032\061\022\062\034\001\002\000\016\051\054\052\055" +
    "\053\060\054\057\055\053\057\070\001\002\000\070\002" +
    "\ufff0\004\ufff0\005\ufff0\012\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\022\ufff0\023\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\057" +
    "\ufff0\001\002\000\032\025\045\026\040\027\036\030\035" +
    "\031\044\032\037\033\024\052\043\056\050\060\032\061" +
    "\022\062\034\001\002\000\016\050\073\051\054\052\055" +
    "\053\060\054\057\055\053\001\002\000\032\025\045\026" +
    "\040\027\036\030\035\031\044\032\037\033\024\052\043" +
    "\056\050\060\032\061\022\062\034\001\002\000\016\050" +
    "\075\051\054\052\055\053\060\054\057\055\053\001\002" +
    "\000\032\025\045\026\040\027\036\030\035\031\044\032" +
    "\037\033\024\052\043\056\050\060\032\061\022\062\034" +
    "\001\002\000\016\051\054\052\055\053\060\054\057\055" +
    "\053\057\077\001\002\000\070\002\uffea\004\uffea\005\uffea" +
    "\012\uffea\015\uffea\016\uffea\017\uffea\022\uffea\023\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\057\uffea\001\002\000\032" +
    "\025\045\026\040\027\036\030\035\031\044\032\037\033" +
    "\024\052\043\056\050\060\032\061\022\062\034\001\002" +
    "\000\016\050\102\051\054\052\055\053\060\054\057\055" +
    "\053\001\002\000\032\025\045\026\040\027\036\030\035" +
    "\031\044\032\037\033\024\052\043\056\050\060\032\061" +
    "\022\062\034\001\002\000\016\051\054\052\055\053\060" +
    "\054\057\055\053\057\104\001\002\000\070\002\uffef\004" +
    "\uffef\005\uffef\012\uffef\015\uffef\016\uffef\017\uffef\022\uffef" +
    "\023\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\057\uffef\001" +
    "\002\000\004\020\112\001\002\000\040\006\026\007\027" +
    "\010\042\025\045\026\040\027\036\030\035\031\044\032" +
    "\037\033\024\052\043\056\030\060\032\061\022\062\034" +
    "\001\002\000\040\006\026\007\027\010\042\025\045\026" +
    "\040\027\036\030\035\031\044\032\037\033\024\052\043" +
    "\056\030\060\032\061\022\062\034\001\002\000\012\004" +
    "\uffdc\005\uffdc\015\uffdc\057\uffdc\001\002\000\012\004\uffdd" +
    "\005\uffdd\015\uffdd\057\uffdd\001\002\000\016\011\017\013" +
    "\004\014\015\024\014\056\020\061\005\001\002\000\016" +
    "\002\uffc5\012\uffc5\016\uffc5\017\uffc5\047\uffc5\051\115\001" +
    "\002\000\016\002\uffce\012\uffce\016\uffce\017\uffce\047\uffce" +
    "\051\uffce\001\002\000\016\011\017\013\004\014\015\024" +
    "\014\056\020\061\005\001\002\000\016\002\uffcf\012\uffcf" +
    "\016\uffcf\017\uffcf\047\uffcf\051\uffcf\001\002\000\036\035" +
    "\127\036\133\037\130\040\131\041\124\042\132\043\122" +
    "\044\123\051\054\052\055\053\060\054\057\055\053\057" +
    "\052\001\002\000\010\004\106\005\107\057\121\001\002" +
    "\000\012\004\uffdf\005\uffdf\015\uffdf\057\uffdf\001\002\000" +
    "\032\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\052\uffe3\056\uffe3\060\uffe3\061\uffe3\062\uffe3\001" +
    "\002\000\032\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\052\uffe2\056\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\001\002\000\032\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\052\uffe5\056\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\001\002\000\032\025\045\026\040\027\036" +
    "\030\035\031\044\032\037\033\024\052\043\056\050\060" +
    "\032\061\022\062\034\001\002\000\032\025\045\026\040" +
    "\027\036\030\035\031\044\032\037\033\024\052\043\056" +
    "\050\060\032\061\022\062\034\001\002\000\032\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\052" +
    "\uffe9\056\uffe9\060\uffe9\061\uffe9\062\uffe9\001\002\000\032" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\052\uffe7\056\uffe7\060\uffe7\061\uffe7\062\uffe7\001\002" +
    "\000\032\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\052\uffe6\056\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\001\002\000\032\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\052\uffe4\056\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\001\002\000\032\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\052\uffe8\056\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\001\002\000\024\004\uffdb\005\uffdb\015" +
    "\uffdb\051\054\052\055\053\060\054\057\055\053\057\uffdb" +
    "\001\002\000\024\004\uffda\005\uffda\015\uffda\051\054\052" +
    "\055\053\060\054\057\055\053\057\uffda\001\002\000\012" +
    "\004\uffde\005\uffde\015\uffde\057\uffde\001\002\000\032\025" +
    "\045\026\040\027\036\030\035\031\044\032\037\033\024" +
    "\052\043\056\050\060\032\061\022\062\034\001\002\000" +
    "\006\050\142\057\143\001\002\000\020\050\ufff6\051\054" +
    "\052\055\053\060\054\057\055\053\057\ufff6\001\002\000" +
    "\032\025\045\026\040\027\036\030\035\031\044\032\037" +
    "\033\024\052\043\056\050\060\032\061\022\062\034\001" +
    "\002\000\070\002\ufff5\004\ufff5\005\ufff5\012\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\022\ufff5\023\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054" +
    "\ufff5\055\ufff5\057\ufff5\001\002\000\020\050\ufff7\051\054" +
    "\052\055\053\060\054\057\055\053\057\ufff7\001\002\000" +
    "\006\012\147\047\146\001\002\000\016\011\017\013\004" +
    "\014\015\024\014\056\020\061\005\001\002\000\016\002" +
    "\uffd5\012\uffd5\016\uffd5\017\uffd5\047\uffd5\051\uffd5\001\002" +
    "\000\010\002\uffd2\012\uffd2\047\uffd2\001\002\000\010\004" +
    "\106\005\107\015\152\001\002\000\016\011\017\013\004" +
    "\014\015\024\014\056\020\061\005\001\002\000\016\002" +
    "\uffcd\012\uffcd\016\155\017\154\047\uffcd\051\115\001\002" +
    "\000\040\006\026\007\027\010\042\025\045\026\040\027" +
    "\036\030\035\031\044\032\037\033\024\052\043\056\030" +
    "\060\032\061\022\062\034\001\002\000\004\015\166\001" +
    "\002\000\016\002\uffcb\012\uffcb\016\160\017\157\047\uffcb" +
    "\051\uffcb\001\002\000\040\006\026\007\027\010\042\025" +
    "\045\026\040\027\036\030\035\031\044\032\037\033\024" +
    "\052\043\056\030\060\032\061\022\062\034\001\002\000" +
    "\004\015\161\001\002\000\016\011\017\013\004\014\015" +
    "\024\014\056\020\061\005\001\002\000\016\002\uffca\012" +
    "\uffca\016\uffca\017\uffca\047\uffca\051\115\001\002\000\010" +
    "\004\106\005\107\015\164\001\002\000\016\011\017\013" +
    "\004\014\015\024\014\056\020\061\005\001\002\000\016" +
    "\002\uffc9\012\uffc9\016\uffc9\017\uffc9\047\uffc9\051\115\001" +
    "\002\000\016\011\017\013\004\014\015\024\014\056\020" +
    "\061\005\001\002\000\016\002\uffcc\012\uffcc\016\uffcc\017" +
    "\uffcc\047\uffcc\051\115\001\002\000\010\004\106\005\107" +
    "\015\171\001\002\000\016\011\017\013\004\014\015\024" +
    "\014\056\020\061\005\001\002\000\016\002\uffc8\012\uffc8" +
    "\016\uffc8\017\uffc8\047\uffc8\051\115\001\002\000\032\025" +
    "\045\026\040\027\036\030\035\031\044\032\037\033\024" +
    "\052\043\056\050\060\032\061\022\062\034\001\002\000" +
    "\016\051\054\052\055\053\060\054\057\055\053\057\175" +
    "\001\002\000\016\002\uffc4\012\uffc4\016\uffc4\017\uffc4\047" +
    "\uffc4\051\uffc4\001\002\000\004\002\001\001\002\000\032" +
    "\025\045\026\040\027\036\030\035\031\044\032\037\033" +
    "\024\052\043\056\050\060\032\061\022\062\034\001\002" +
    "\000\032\025\045\026\040\027\036\030\035\031\044\032" +
    "\037\033\024\052\043\056\050\060\032\061\022\062\034" +
    "\001\002\000\026\002\uffd0\012\uffd0\016\uffd0\017\uffd0\047" +
    "\uffd0\051\054\052\055\053\060\054\057\055\053\001\002" +
    "\000\016\022\203\051\054\052\055\053\060\054\057\055" +
    "\053\001\002\000\032\025\045\026\040\027\036\030\035" +
    "\031\044\032\037\033\024\052\043\056\050\060\032\061" +
    "\022\062\034\001\002\000\016\023\205\051\054\052\055" +
    "\053\060\054\057\055\053\001\002\000\032\025\045\026" +
    "\040\027\036\030\035\031\044\032\037\033\024\052\043" +
    "\056\050\060\032\061\022\062\034\001\002\000\020\045" +
    "\210\046\207\051\054\052\055\053\060\054\057\055\053" +
    "\001\002\000\016\011\017\013\004\014\015\024\014\056" +
    "\020\061\005\001\002\000\016\011\017\013\004\014\015" +
    "\024\014\056\020\061\005\001\002\000\016\002\uffc7\012" +
    "\uffc7\016\uffc7\017\uffc7\047\uffc7\051\115\001\002\000\016" +
    "\002\uffc6\012\uffc6\016\uffc6\017\uffc6\047\uffc6\051\115\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\022\013\020\014\015\017\011\020\007\021" +
    "\012\022\005\023\006\024\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\022\003\032\004" +
    "\040\005\150\006\024\001\001\000\002\001\001\000\020" +
    "\013\020\014\144\017\011\020\007\021\012\022\005\023" +
    "\006\001\001\000\014\002\022\003\032\004\040\005\030" +
    "\006\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\055\011\125\012\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\022\003\032\004\040\005" +
    "\135\006\024\001\001\000\002\001\001\000\014\002\116" +
    "\003\032\004\040\005\117\006\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\064\003\032\004\040\006\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\046\003\032\004\040" +
    "\006\024\001\001\000\004\010\055\001\001\000\012\002" +
    "\050\003\032\004\040\006\024\001\001\000\004\010\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\060\003\032\004\040" +
    "\006\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\055\001\001\000\012\002\062\003\032\004\040" +
    "\006\024\001\001\000\004\010\055\001\001\000\002\001" +
    "\001\000\004\010\055\001\001\000\012\002\066\003\032" +
    "\004\040\006\024\001\001\000\004\010\055\001\001\000" +
    "\002\001\001\000\012\002\071\003\032\004\040\006\024" +
    "\001\001\000\004\010\055\001\001\000\012\002\073\003" +
    "\032\004\040\006\024\001\001\000\004\010\055\001\001" +
    "\000\012\002\075\003\032\004\040\006\024\001\001\000" +
    "\004\010\055\001\001\000\002\001\001\000\012\002\100" +
    "\003\032\004\040\006\024\001\001\000\004\010\055\001" +
    "\001\000\012\002\102\003\032\004\040\006\024\001\001" +
    "\000\004\010\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\022\003\032\004\040\005\110\006\024" +
    "\001\001\000\014\002\022\003\032\004\040\005\107\006" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\113\017\011\020\007\021\012\022\005\023\006\025" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\115\017\011\020\007\021\012\022\005\023\006\001" +
    "\001\000\002\001\001\000\010\010\055\011\125\012\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\134" +
    "\003\032\004\040\006\024\001\001\000\012\002\133\003" +
    "\032\004\040\006\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\055\001\001\000\004\010\055\001\001" +
    "\000\002\001\001\000\014\002\140\003\032\004\040\006" +
    "\024\015\137\001\001\000\002\001\001\000\004\010\055" +
    "\001\001\000\012\002\143\003\032\004\040\006\024\001" +
    "\001\000\002\001\001\000\004\010\055\001\001\000\002" +
    "\001\001\000\016\013\147\017\011\020\007\021\012\022" +
    "\005\023\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\113\017\011\020\007\021" +
    "\012\022\005\023\006\025\152\001\001\000\004\016\155" +
    "\001\001\000\014\002\022\003\032\004\040\005\167\006" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\022\003\032\004\040\005\162\006\024\001\001\000" +
    "\002\001\001\000\020\013\113\017\011\020\007\021\012" +
    "\022\005\023\006\025\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\113\017\011\020\007\021\012" +
    "\022\005\023\006\025\164\001\001\000\002\001\001\000" +
    "\020\013\113\017\011\020\007\021\012\022\005\023\006" +
    "\025\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\113\017\011\020\007\021\012\022\005\023\006" +
    "\025\171\001\001\000\002\001\001\000\012\002\173\003" +
    "\032\004\040\006\024\001\001\000\004\010\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\201\003" +
    "\032\004\040\006\024\001\001\000\012\002\200\003\032" +
    "\004\040\006\024\001\001\000\004\010\055\001\001\000" +
    "\004\010\055\001\001\000\012\002\203\003\032\004\040" +
    "\006\024\001\001\000\004\010\055\001\001\000\012\002" +
    "\205\003\032\004\040\006\024\001\001\000\004\010\055" +
    "\001\001\000\020\013\113\017\011\020\007\021\012\022" +
    "\005\023\006\025\211\001\001\000\020\013\113\017\011" +
    "\020\007\021\012\022\005\023\006\025\210\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Main start_val = (Main)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // num_op ::= PLUS 
            {
              Operator RESULT =null;
		 RESULT = new PlusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // num_op ::= MINUS 
            {
              Operator RESULT =null;
		 RESULT = new MinusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // num_op ::= TIMES 
            {
              Operator RESULT =null;
		 RESULT = new TimesOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // num_op ::= DIVIDE 
            {
              Operator RESULT =null;
		 RESULT = new DivideOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // num_op ::= MODE 
            {
              Operator RESULT =null;
		 RESULT = new ModeOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= num_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= str_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= list_stat 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_content ::= list_content COMMA expr 
            {
              ListContent RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListContent a = (ListContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(e); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_content",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_content ::= expr 
            {
              ListContent RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListContent(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_content",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_stat ::= LIST LPAREN list_content RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListContent e = (ListContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new ListExpr(e.getExpr());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stat",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // num_expr ::= NUM 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new IntExpression(e.intValue());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // num_expr ::= READINT 
            {
              Expr RESULT =null;
		
                    RESULT = new IntEnterExpression();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // num_expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new UMinusExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // num_expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new PIntExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // num_expr ::= LENGTH LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRLengthExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // num_expr ::= POSITION LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRPositionExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // num_expr ::= expr num_op expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator o = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new OperatorExpression(e, o, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new StringExpression(s.substring(1, s.length()-1));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_expr ::= READSTR 
            {
              Expr RESULT =null;
		
                    RESULT = new StrEnterExpression();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // str_expr ::= CONCATENATE LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ConcatStringExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // str_expr ::= SUBSTRING LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr pos = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr length = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new SubStringExpression(s, pos, length);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // num_rel ::= EQ 
            {
              Condition RESULT =null;
		 RESULT = new EqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // num_rel ::= LT 
            {
              Condition RESULT =null;
		 RESULT = new LtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // num_rel ::= LE 
            {
              Condition RESULT =null;
		 RESULT = new LeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // num_rel ::= GT 
            {
              Condition RESULT =null;
		 RESULT = new GtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // num_rel ::= GE 
            {
              Condition RESULT =null;
		 RESULT = new GeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // num_rel ::= NE 
            {
              Condition RESULT =null;
		 RESULT = new NeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // str_rel ::= STREQ 
            {
              Condition RESULT =null;
		 RESULT = new StrEqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // str_rel ::= STRNOTEQ 
            {
              Condition RESULT =null;
		 RESULT = new StrNotEqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool_expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bool_expr ::= LPAREN bool_expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bool_expr ::= NOT bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NegationBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_expr ::= bool_expr AND bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bool_expr ::= bool_expr OR bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bool_expr ::= expr num_rel expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(e, o, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bool_expr ::= expr str_rel expr 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(s, o, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_instr ::= assign_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_instr ::= if_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_instr ::= while_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_instr ::= for_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_instr ::= BEGIN instr END 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstructionList si = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BeginEndInstruction(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_instr ::= output_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_instr ::= EXIT 
            {
              SimpleInstruction RESULT =null;
		 System.exit(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instr ::= instr SEMI simple_instr 
            {
              InstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(si); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instr ::= simple_instr 
            {
              InstructionList RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstructionList(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign_stat ::= IDENT ASSIGN expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignInstruction(i,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // recursive ::= recursive PLUS simple_instr 
            {
              Recursive RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Recursive i = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(si); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // recursive ::= simple_instr 
            {
              Recursive RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Recursive(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_stat ::= EGER bool_expr ISE recursive 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfInstruction(c, s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if_stat ::= EGER bool_expr ISE recursive DEGIL ISE recursive 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s2 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseIfInstruction(c, s.getSimplein(), s2.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if_stat ::= EGER bool_expr ISE recursive if_content 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseInstruction(c, s.getSimplein(), cont.getExpr(), cont.getSimpleinsList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if_stat ::= EGER bool_expr ISE recursive if_content DEGIL ISE recursive 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s3 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ElseInstruction(c, s.getSimplein(), cont.getExpr(), cont.getSimpleinsList(), s3.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_content ::= if_content YADA bool_expr ISE recursive 
            {
              ElseIfContent RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s2 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cont.add(c2,s2.getSimplein()); RESULT = cont;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_content",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_content ::= YADA bool_expr ISE recursive 
            {
              ElseIfContent RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s2 = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElseIfContent(c2, s2.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_content",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for_stat ::= IDENT DEGIS expr ILE expr ARASINDA expr ART recursive 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForInstruction(i,e,e2,e3,s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // for_stat ::= IDENT DEGIS expr ILE expr ARASINDA expr AZ recursive 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForInstruction2(i,e,e2,e3,s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // while_stat ::= LPAREN bool_expr RPAREN WHILE recursive 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Recursive s = (Recursive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileInstruction(c, s.getSimplein()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // output_stat ::= YAZ LPAREN expr RPAREN 
            {
              SimpleInstruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OutputInstruction(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // program ::= instr 
            {
              Main RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Main program = new Main(i);
            program.exec();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
