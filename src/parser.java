
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\015\005\000\002\015\003\000\002" +
    "\006\006\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\005\000\002\003\006\000\002\003\010" +
    "\000\002\003\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\010\000\002\004\012\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\005\000\002\013\003" +
    "\000\002\013\003\000\002\014\005\000\002\014\003\000" +
    "\002\017\005\000\002\020\006\000\002\020\007\000\002" +
    "\020\012\000\002\016\007\000\002\016\006\000\002\021" +
    "\006\000\002\021\006\000\002\022\006\000\002\023\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\020\011\020\013\005\014\015\020\004\021" +
    "\017\022\014\055\006\001\002\000\040\006\034\007\035" +
    "\010\050\023\053\024\046\025\044\026\043\027\052\030" +
    "\045\031\032\046\051\052\036\054\040\055\030\056\042" +
    "\001\002\000\016\002\uffd4\012\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\043\uffd4\001\002\000\004\032\170\001\002\000\016" +
    "\002\uffd5\012\uffd5\016\uffd5\017\uffd5\020\uffd5\043\uffd5\001" +
    "\002\000\016\002\uffd8\012\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\043\uffd8\001\002\000\004\002\167\001\002\000\016\002" +
    "\uffd9\012\uffd9\016\uffd9\017\uffd9\020\uffd9\043\uffd9\001\002" +
    "\000\016\002\uffd7\012\uffd7\016\uffd7\017\uffd7\020\uffd7\043" +
    "\uffd7\001\002\000\004\052\164\001\002\000\040\006\034" +
    "\007\035\010\050\023\053\024\046\025\044\026\043\027" +
    "\052\030\045\031\032\046\051\052\036\054\040\055\030" +
    "\056\042\001\002\000\006\002\uffc8\043\023\001\002\000" +
    "\020\011\020\013\005\014\015\020\004\021\017\022\014" +
    "\055\006\001\002\000\020\011\020\013\005\014\015\020" +
    "\004\021\017\022\014\055\006\001\002\000\010\002\uffd2" +
    "\012\uffd2\043\uffd2\001\002\000\006\012\024\043\023\001" +
    "\002\000\020\011\020\013\005\014\015\020\004\021\017" +
    "\022\014\055\006\001\002\000\016\002\uffd6\012\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\043\uffd6\001\002\000\010\002\uffd3" +
    "\012\uffd3\043\uffd3\001\002\000\004\020\027\001\002\000" +
    "\040\006\034\007\035\010\050\023\053\024\046\025\044" +
    "\026\043\027\052\030\045\031\032\046\051\052\036\054" +
    "\040\055\030\056\042\001\002\000\064\002\ufffb\004\ufffb" +
    "\005\ufffb\012\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\053\ufffb\001\002\000\034\033\127" +
    "\034\133\035\130\036\131\037\124\040\132\041\122\042" +
    "\123\045\062\046\063\047\066\050\065\051\061\001\002" +
    "\000\004\052\137\001\002\000\064\002\ufff8\004\ufff8\005" +
    "\ufff8\012\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\053\ufff8\001\002\000\040\006\034\007" +
    "\035\010\050\023\053\024\046\025\044\026\043\027\052" +
    "\030\045\031\032\046\051\052\036\054\040\055\030\056" +
    "\042\001\002\000\030\002\uffe1\004\uffe1\005\uffe1\012\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\043\uffe1\053" +
    "\uffe1\001\002\000\040\006\034\007\035\010\050\023\053" +
    "\024\046\025\044\026\043\027\052\030\045\031\032\046" +
    "\051\052\036\054\040\055\030\056\042\001\002\000\022" +
    "\002\uffca\004\113\005\114\012\uffca\016\uffca\017\uffca\020" +
    "\uffca\043\uffca\001\002\000\064\002\ufff4\004\ufff4\005\ufff4" +
    "\012\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\053\ufff4\001\002\000\064\002\ufffa\004\ufffa" +
    "\005\ufffa\012\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\053\ufffa\001\002\000\064\002\uffed" +
    "\004\uffed\005\uffed\012\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\051\uffed\053\uffed\001\002\000\064" +
    "\002\uffec\004\uffec\005\uffec\012\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\053\uffec\001\002" +
    "\000\004\052\106\001\002\000\004\052\077\001\002\000" +
    "\004\052\074\001\002\000\064\002\ufff9\004\ufff9\005\ufff9" +
    "\012\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\053\ufff9\001\002\000\030\002\uffe0\004\uffe0" +
    "\005\uffe0\012\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\043\uffe0\053\uffe0\001\002\000\032\023\053\024\046" +
    "\025\044\026\043\027\052\030\045\031\032\046\051\052" +
    "\056\054\040\055\030\056\042\001\002\000\004\052\054" +
    "\001\002\000\064\002\ufff3\004\ufff3\005\ufff3\012\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\053\ufff3\001\002\000\032\023\053\024\046\025\044\026" +
    "\043\027\052\030\045\031\032\046\051\052\056\054\040" +
    "\055\030\056\042\001\002\000\016\044\070\045\062\046" +
    "\063\047\066\050\065\051\061\001\002\000\032\023\053" +
    "\024\046\025\044\026\043\027\052\030\045\031\032\046" +
    "\051\052\056\054\040\055\030\056\042\001\002\000\016" +
    "\045\062\046\063\047\066\050\065\051\061\053\060\001" +
    "\002\000\064\002\ufff1\004\ufff1\005\ufff1\012\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\053" +
    "\ufff1\001\002\000\032\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\046\ufffc\052\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\001\002\000\032\023\000\024\000\025\000" +
    "\026\000\027\000\030\000\031\000\046\000\052\000\054" +
    "\000\055\000\056\000\001\002\000\032\023\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\046\uffff\052" +
    "\uffff\054\uffff\055\uffff\056\uffff\001\002\000\032\023\053" +
    "\024\046\025\044\026\043\027\052\030\045\031\032\046" +
    "\051\052\056\054\040\055\030\056\042\001\002\000\032" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\046\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002" +
    "\000\032\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\031\ufffe\046\ufffe\052\ufffe\054\ufffe\055\ufffe\056\ufffe" +
    "\001\002\000\064\002\uffee\004\uffee\005\uffee\012\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\062\046\063\047\066\050\065\051\061" +
    "\053\uffee\001\002\000\032\023\053\024\046\025\044\026" +
    "\043\027\052\030\045\031\032\046\051\052\056\054\040" +
    "\055\030\056\042\001\002\000\016\045\062\046\063\047" +
    "\066\050\065\051\061\053\072\001\002\000\064\002\uffeb" +
    "\004\uffeb\005\uffeb\012\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\053\uffeb\001\002\000\064" +
    "\002\ufff2\004\ufff2\005\ufff2\012\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045" +
    "\ufff2\046\ufff2\047\066\050\065\051\061\053\ufff2\001\002" +
    "\000\032\023\053\024\046\025\044\026\043\027\052\030" +
    "\045\031\032\046\051\052\056\054\040\055\030\056\042" +
    "\001\002\000\016\045\062\046\063\047\066\050\065\051" +
    "\061\053\076\001\002\000\064\002\ufff0\004\ufff0\005\ufff0" +
    "\012\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\053\ufff0\001\002\000\032\023\053\024\046" +
    "\025\044\026\043\027\052\030\045\031\032\046\051\052" +
    "\056\054\040\055\030\056\042\001\002\000\016\044\101" +
    "\045\062\046\063\047\066\050\065\051\061\001\002\000" +
    "\032\023\053\024\046\025\044\026\043\027\052\030\045" +
    "\031\032\046\051\052\056\054\040\055\030\056\042\001" +
    "\002\000\016\044\103\045\062\046\063\047\066\050\065" +
    "\051\061\001\002\000\032\023\053\024\046\025\044\026" +
    "\043\027\052\030\045\031\032\046\051\052\056\054\040" +
    "\055\030\056\042\001\002\000\016\045\062\046\063\047" +
    "\066\050\065\051\061\053\105\001\002\000\064\002\uffea" +
    "\004\uffea\005\uffea\012\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\053\uffea\001\002\000\032" +
    "\023\053\024\046\025\044\026\043\027\052\030\045\031" +
    "\032\046\051\052\056\054\040\055\030\056\042\001\002" +
    "\000\016\044\110\045\062\046\063\047\066\050\065\051" +
    "\061\001\002\000\032\023\053\024\046\025\044\026\043" +
    "\027\052\030\045\031\032\046\051\052\056\054\040\055" +
    "\030\056\042\001\002\000\016\045\062\046\063\047\066" +
    "\050\065\051\061\053\112\001\002\000\064\002\uffef\004" +
    "\uffef\005\uffef\012\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\050\uffef\051\uffef\053\uffef\001\002\000\040\006" +
    "\034\007\035\010\050\023\053\024\046\025\044\026\043" +
    "\027\052\030\045\031\032\046\051\052\036\054\040\055" +
    "\030\056\042\001\002\000\040\006\034\007\035\010\050" +
    "\023\053\024\046\025\044\026\043\027\052\030\045\031" +
    "\032\046\051\052\036\054\040\055\030\056\042\001\002" +
    "\000\030\002\uffdc\004\uffdc\005\uffdc\012\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\043\uffdc\053\uffdc\001\002" +
    "\000\030\002\uffdd\004\uffdd\005\uffdd\012\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\043\uffdd\053\uffdd\001\002" +
    "\000\036\033\127\034\133\035\130\036\131\037\124\040" +
    "\132\041\122\042\123\045\062\046\063\047\066\050\065" +
    "\051\061\053\060\001\002\000\010\004\113\005\114\053" +
    "\121\001\002\000\030\002\uffdf\004\uffdf\005\uffdf\012\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\043\uffdf\053" +
    "\uffdf\001\002\000\032\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\046\uffe3\052\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\001\002\000\032\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\046\uffe2\052\uffe2\054" +
    "\uffe2\055\uffe2\056\uffe2\001\002\000\032\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\046\uffe5\052" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000\032\023\053" +
    "\024\046\025\044\026\043\027\052\030\045\031\032\046" +
    "\051\052\056\054\040\055\030\056\042\001\002\000\032" +
    "\023\053\024\046\025\044\026\043\027\052\030\045\031" +
    "\032\046\051\052\056\054\040\055\030\056\042\001\002" +
    "\000\032\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\046\uffe9\052\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\001\002\000\032\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\046\uffe7\052\uffe7\054\uffe7\055\uffe7" +
    "\056\uffe7\001\002\000\032\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\046\uffe6\052\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\001\002\000\032\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\046\uffe4\052\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\001\002\000\032\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\046\uffe8" +
    "\052\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000\042\002" +
    "\uffdb\004\uffdb\005\uffdb\012\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\043\uffdb\045\062\046\063\047\066\050" +
    "\065\051\061\053\uffdb\001\002\000\042\002\uffda\004\uffda" +
    "\005\uffda\012\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\043\uffda\045\062\046\063\047\066\050\065\051\061" +
    "\053\uffda\001\002\000\030\002\uffde\004\uffde\005\uffde\012" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\043\uffde" +
    "\053\uffde\001\002\000\032\023\053\024\046\025\044\026" +
    "\043\027\052\030\045\031\032\046\051\052\056\054\040" +
    "\055\030\056\042\001\002\000\006\044\142\053\143\001" +
    "\002\000\020\044\ufff6\045\062\046\063\047\066\050\065" +
    "\051\061\053\ufff6\001\002\000\032\023\053\024\046\025" +
    "\044\026\043\027\052\030\045\031\032\046\051\052\056" +
    "\054\040\055\030\056\042\001\002\000\064\002\ufff5\004" +
    "\ufff5\005\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\053\ufff5\001\002\000\020\044" +
    "\ufff7\045\062\046\063\047\066\050\065\051\061\053\ufff7" +
    "\001\002\000\010\004\113\005\114\015\146\001\002\000" +
    "\020\011\020\013\005\014\015\020\004\021\017\022\014" +
    "\055\006\001\002\000\016\002\uffd0\012\uffd0\016\uffd0\017" +
    "\150\020\uffd0\043\uffd0\001\002\000\040\006\034\007\035" +
    "\010\050\023\053\024\046\025\044\026\043\027\052\030" +
    "\045\031\032\046\051\052\036\054\040\055\030\056\042" +
    "\001\002\000\016\002\uffcf\012\uffcf\016\153\017\152\020" +
    "\uffcf\043\uffcf\001\002\000\040\006\034\007\035\010\050" +
    "\023\053\024\046\025\044\026\043\027\052\030\045\031" +
    "\032\046\051\052\036\054\040\055\030\056\042\001\002" +
    "\000\004\015\154\001\002\000\020\011\020\013\005\014" +
    "\015\020\004\021\017\022\014\055\006\001\002\000\016" +
    "\002\uffce\012\uffce\016\uffce\017\uffce\020\uffce\043\uffce\001" +
    "\002\000\010\004\113\005\114\015\157\001\002\000\020" +
    "\011\020\013\005\014\015\020\004\021\017\022\014\055" +
    "\006\001\002\000\016\002\uffcd\012\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\043\uffcd\001\002\000\010\004\113\005\114\015" +
    "\162\001\002\000\020\011\020\013\005\014\015\020\004" +
    "\021\017\022\014\055\006\001\002\000\016\002\uffcc\012" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\043\uffcc\001\002\000\032" +
    "\023\053\024\046\025\044\026\043\027\052\030\045\031" +
    "\032\046\051\052\056\054\040\055\030\056\042\001\002" +
    "\000\016\045\062\046\063\047\066\050\065\051\061\053" +
    "\166\001\002\000\016\002\uffc9\012\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\043\uffc9\001\002\000\004\002\001\001\002\000" +
    "\032\023\053\024\046\025\044\026\043\027\052\030\045" +
    "\031\032\046\051\052\056\054\040\055\030\056\042\001" +
    "\002\000\030\002\uffd1\012\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\043\uffd1\045\062\046\063\047\066\050\065\051\061\001" +
    "\002\000\010\004\113\005\114\021\173\001\002\000\020" +
    "\011\020\013\005\014\015\020\004\021\017\022\014\055" +
    "\006\001\002\000\016\002\uffcb\012\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\043\uffcb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\020\013\020\014\015\017\011\020\007\021" +
    "\012\022\006\023\010\001\001\000\014\002\030\003\040" +
    "\004\046\005\171\006\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\030\003\040\004\046\005\144\006\032" +
    "\001\001\000\002\001\001\000\014\013\025\017\011\020" +
    "\007\021\012\022\006\001\001\000\016\013\020\014\021" +
    "\017\011\020\007\021\012\022\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\024\017\011\020\007" +
    "\021\012\022\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\030\003\040\004\046" +
    "\005\036\006\032\001\001\000\002\001\001\000\010\010" +
    "\063\011\125\012\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\030\003\040\004\046\005\135\006" +
    "\032\001\001\000\002\001\001\000\014\002\116\003\040" +
    "\004\046\005\117\006\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\072" +
    "\003\040\004\046\006\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\054\003\040\004\046\006\032" +
    "\001\001\000\004\010\063\001\001\000\012\002\056\003" +
    "\040\004\046\006\032\001\001\000\004\010\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\066\003\040\004\046\006\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\063\001\001\000\012\002\070\003\040\004\046\006\032" +
    "\001\001\000\004\010\063\001\001\000\002\001\001\000" +
    "\004\010\063\001\001\000\012\002\074\003\040\004\046" +
    "\006\032\001\001\000\004\010\063\001\001\000\002\001" +
    "\001\000\012\002\077\003\040\004\046\006\032\001\001" +
    "\000\004\010\063\001\001\000\012\002\101\003\040\004" +
    "\046\006\032\001\001\000\004\010\063\001\001\000\012" +
    "\002\103\003\040\004\046\006\032\001\001\000\004\010" +
    "\063\001\001\000\002\001\001\000\012\002\106\003\040" +
    "\004\046\006\032\001\001\000\004\010\063\001\001\000" +
    "\012\002\110\003\040\004\046\006\032\001\001\000\004" +
    "\010\063\001\001\000\002\001\001\000\014\002\030\003" +
    "\040\004\046\005\115\006\032\001\001\000\014\002\030" +
    "\003\040\004\046\005\114\006\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\063\011\125\012\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\134" +
    "\003\040\004\046\006\032\001\001\000\012\002\133\003" +
    "\040\004\046\006\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\063\001\001\000\004\010\063\001\001" +
    "\000\002\001\001\000\014\002\140\003\040\004\046\006" +
    "\032\015\137\001\001\000\002\001\001\000\004\010\063" +
    "\001\001\000\012\002\143\003\040\004\046\006\032\001" +
    "\001\000\002\001\001\000\004\010\063\001\001\000\002" +
    "\001\001\000\014\013\146\017\011\020\007\021\012\022" +
    "\006\001\001\000\004\016\150\001\001\000\014\002\030" +
    "\003\040\004\046\005\160\006\032\001\001\000\002\001" +
    "\001\000\014\002\030\003\040\004\046\005\155\006\032" +
    "\001\001\000\002\001\001\000\014\013\154\017\011\020" +
    "\007\021\012\022\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\157\017\011\020\007\021\012\022" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\162\017\011\020\007\021\012\022\006\001\001\000" +
    "\002\001\001\000\012\002\164\003\040\004\046\006\032" +
    "\001\001\000\004\010\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\170\003\040\004\046\006\032" +
    "\001\001\000\004\010\063\001\001\000\002\001\001\000" +
    "\014\013\173\017\011\020\007\021\012\022\006\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Main start_val = (Main)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // num_op ::= PLUS 
            {
              Operator RESULT =null;
		 RESULT = new PlusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // num_op ::= MINUS 
            {
              Operator RESULT =null;
		 RESULT = new MinusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // num_op ::= TIMES 
            {
              Operator RESULT =null;
		 RESULT = new TimesOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // num_op ::= DIVIDE 
            {
              Operator RESULT =null;
		 RESULT = new DivideOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // num_op ::= MODE 
            {
              Operator RESULT =null;
		 RESULT = new ModeOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= num_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= str_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= list_stat 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_content ::= list_content COMMA expr 
            {
              ListContent RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListContent a = (ListContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(e); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_content",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_content ::= expr 
            {
              ListContent RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListContent(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_content",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_stat ::= LIST LPAREN list_content RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListContent e = (ListContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new ListExpr(e.getExpr());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stat",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // num_expr ::= NUM 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new IntExpression(e.intValue());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // num_expr ::= READINT 
            {
              Expr RESULT =null;
		
                    RESULT = new IntEnterExpression();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // num_expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new UMinusExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // num_expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new PIntExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // num_expr ::= LENGTH LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRLengthExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // num_expr ::= POSITION LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRPositionExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // num_expr ::= expr num_op expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator o = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new OperatorExpression(e, o, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new StringExpression(s.substring(1, s.length()-1));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_expr ::= READSTR 
            {
              Expr RESULT =null;
		
                    RESULT = new StrEnterExpression();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // str_expr ::= CONCATENATE LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ConcatStringExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // str_expr ::= SUBSTRING LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr pos = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr length = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new SubStringExpression(s, pos, length);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // num_rel ::= EQ 
            {
              Condition RESULT =null;
		 RESULT = new EqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // num_rel ::= LT 
            {
              Condition RESULT =null;
		 RESULT = new LtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // num_rel ::= LE 
            {
              Condition RESULT =null;
		 RESULT = new LeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // num_rel ::= GT 
            {
              Condition RESULT =null;
		 RESULT = new GtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // num_rel ::= GE 
            {
              Condition RESULT =null;
		 RESULT = new GeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // num_rel ::= NE 
            {
              Condition RESULT =null;
		 RESULT = new NeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // str_rel ::= STREQ 
            {
              Condition RESULT =null;
		 RESULT = new StrEqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // str_rel ::= STRNOTEQ 
            {
              Condition RESULT =null;
		 RESULT = new StrNotEqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool_expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bool_expr ::= LPAREN bool_expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bool_expr ::= NOT bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NegationBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_expr ::= bool_expr AND bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bool_expr ::= bool_expr OR bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bool_expr ::= expr num_rel expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(e, o, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bool_expr ::= expr str_rel expr 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(s, o, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_instr ::= assign_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_instr ::= if_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_instr ::= while_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_instr ::= BEGIN instr END 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstructionList si = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BeginEndInstruction(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_instr ::= output_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_instr ::= EXIT 
            {
              SimpleInstruction RESULT =null;
		 System.exit(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instr ::= instr SEMI simple_instr 
            {
              InstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(si); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instr ::= simple_instr 
            {
              InstructionList RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstructionList(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assign_stat ::= IDENT ASSIGN expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignInstruction(i,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // if_stat ::= EGER bool_expr ISE simple_instr 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfInstruction(c, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_stat ::= EGER bool_expr ISE simple_instr if_content 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseInstruction(c, s, cont.getExpr(), cont.getSimpleinsList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_stat ::= EGER bool_expr ISE simple_instr if_content DEGIL ISE simple_instr 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction s3 = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ElseInstruction(c, s, cont.getExpr(), cont.getSimpleinsList(), s3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_content ::= if_content YADA bool_expr ISE simple_instr 
            {
              ElseIfContent RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ElseIfContent cont = (ElseIfContent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction s2 = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cont.add(c2,s2); RESULT = cont;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_content",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if_content ::= YADA bool_expr ISE simple_instr 
            {
              ElseIfContent RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction s2 = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElseIfContent(c2, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_content",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // while_stat ::= WHILE bool_expr DO simple_instr 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileInstruction(c, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while_stat ::= DO simple_instr WHILE bool_expr 
            {
              SimpleInstruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DoWhileInstruction(c, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // output_stat ::= YAZ LPAREN expr RPAREN 
            {
              SimpleInstruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OutputInstruction(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // program ::= instr 
            {
              Main RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Main program = new Main(i);
            program.exec();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
