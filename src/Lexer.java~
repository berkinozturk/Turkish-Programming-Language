// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lcalc.flex

import java_cup.runtime.*;
      

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\5\0\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\12\21\1\0\1\22\1\23\1\24"+
    "\1\25\2\0\32\26\1\0\1\27\2\0\1\26\1\0"+
    "\1\30\1\31\1\32\1\33\1\34\1\26\1\35\1\36"+
    "\1\37\1\26\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\26\1\46\1\47\1\50\1\51\1\52\2\26\1\53"+
    "\1\54\1\55\1\0\1\56\7\0\1\3\41\0\1\57"+
    "\11\0\1\60\4\0\1\61\5\0\1\62\6\0\1\63"+
    "\1\64\1\65\262\0\1\66\u01af\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\20\21\1\22\1\23\1\1\1\24\1\0"+
    "\1\25\2\0\1\26\1\27\1\30\5\21\1\0\2\21"+
    "\1\0\2\21\2\0\3\21\2\0\1\21\1\0\7\21"+
    "\1\31\1\21\2\0\4\21\1\0\2\21\4\0\2\21"+
    "\2\0\1\32\1\33\1\34\2\0\1\21\1\0\5\21"+
    "\1\35\2\21\1\0\1\21\1\36\3\0\3\21\1\37"+
    "\1\21\1\0\2\21\4\0\1\40\1\21\3\0\1\41"+
    "\1\21\1\42\4\21\1\0\1\21\1\43\1\0\1\21"+
    "\5\0\1\21\2\0\1\21\1\44\5\0\1\21\1\45"+
    "\1\46\1\47\1\21\1\50\1\0\2\21\1\0\1\21"+
    "\1\51\6\0\1\21\1\0\1\52\3\0\1\53\1\0"+
    "\1\54\1\0\1\55\2\0\2\21\1\0\2\21\1\0"+
    "\1\21\3\0\1\56\2\0\1\21\3\0\1\57\5\0"+
    "\2\21\1\0\2\21\5\0\1\56\2\0\1\60\4\0"+
    "\1\61\1\62\2\0\2\21\1\0\1\63\1\64\2\0"+
    "\1\65\1\66\1\0\1\56\1\0\1\67\6\0\1\70"+
    "\1\0\1\21\1\71\1\21\5\0\1\72\1\73\5\0"+
    "\1\21\1\0\1\74\6\0\1\75\3\0\1\21\11\0"+
    "\1\76\1\77\1\100\3\0\1\101\11\0\1\102\6\0"+
    "\1\103\5\0\1\104\10\0\1\105\6\0\1\106\4\0"+
    "\1\107\1\110\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\156\0\245\0\334\0\67\0\67"+
    "\0\u0113\0\67\0\67\0\67\0\67\0\67\0\u014a\0\67"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\67\0\67\0\u0596\0\67\0\334"+
    "\0\67\0\u05cd\0\u0604\0\67\0\67\0\67\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u0226\0\u0226\0\u0226\0\u101d"+
    "\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5"+
    "\0\u0226\0\u120c\0\u1243\0\u127a\0\u12b1\0\u0226\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u0226\0\u1432\0\u1469\0\u14a0"+
    "\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u0226\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\67\0\u16c6\0\67\0\u16fd\0\u1734\0\u176b"+
    "\0\u17a2\0\u17d9\0\u1810\0\u0226\0\u1847\0\u187e\0\u18b5\0\u18ec"+
    "\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u0226"+
    "\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\67\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\67\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27"+
    "\0\u1f5e\0\67\0\u1f95\0\u1fcc\0\u2003\0\67\0\u203a\0\67"+
    "\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2"+
    "\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa"+
    "\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\67\0\u24f4\0\u252b"+
    "\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3"+
    "\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b"+
    "\0\u0226\0\u28d2\0\u2909\0\u2940\0\u2977\0\67\0\u29ae\0\u29e5"+
    "\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u0226\0\u0226\0\u2af8\0\u2b2f"+
    "\0\67\0\67\0\u2b66\0\67\0\u2b9d\0\67\0\u2bd4\0\u2c0b"+
    "\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\67\0\u2d1e\0\u2d55\0\u0226"+
    "\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\67\0\67"+
    "\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057"+
    "\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1\0\67\0\u31d8"+
    "\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390"+
    "\0\u33c7\0\u33fe\0\u3435\0\u346c\0\67\0\67\0\u0226\0\u34a3"+
    "\0\u34da\0\u3511\0\67\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624"+
    "\0\u365b\0\u3692\0\u36c9\0\u3700\0\67\0\u3737\0\u376e\0\u37a5"+
    "\0\u37dc\0\u3813\0\u384a\0\67\0\u3881\0\u38b8\0\u38ef\0\u3926"+
    "\0\u395d\0\67\0\u3994\0\u39cb\0\u3a02\0\u3a39\0\u3a70\0\u3aa7"+
    "\0\u3ade\0\u3b15\0\67\0\u3b4c\0\u3b83\0\u3bba\0\u3bf1\0\u3c28"+
    "\0\u3c5f\0\67\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b\0\67\0\67"+
    "\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\2\1\25"+
    "\1\26\1\24\1\27\1\30\1\24\1\31\1\32\1\33"+
    "\1\34\2\24\1\35\1\36\1\37\1\40\1\24\1\41"+
    "\1\42\1\43\1\24\1\44\1\45\4\2\1\46\3\2"+
    "\71\0\1\3\110\0\1\47\42\0\10\50\1\51\16\50"+
    "\1\52\37\50\13\0\1\53\74\0\1\17\71\0\1\54"+
    "\66\0\1\55\66\0\1\56\63\0\1\24\4\0\1\24"+
    "\1\0\25\24\33\0\1\24\4\0\1\24\1\0\16\24"+
    "\1\57\1\24\1\60\3\24\1\61\33\0\1\24\4\0"+
    "\1\24\1\0\1\62\6\24\1\63\15\24\6\0\1\64"+
    "\24\0\1\24\4\0\1\24\1\0\4\24\1\65\7\24"+
    "\1\66\10\24\6\0\1\67\24\0\1\24\4\0\1\24"+
    "\1\0\10\24\1\70\1\71\13\24\7\0\1\72\1\73"+
    "\22\0\1\24\4\0\1\24\1\0\4\24\1\74\20\24"+
    "\33\0\1\24\4\0\1\24\1\0\11\24\1\75\5\24"+
    "\1\76\5\24\6\0\1\77\1\0\1\100\22\0\1\24"+
    "\4\0\1\24\1\0\4\24\1\101\20\24\7\0\1\102"+
    "\23\0\1\24\4\0\1\24\1\0\7\24\1\103\15\24"+
    "\33\0\1\24\4\0\1\24\1\0\11\24\1\104\13\24"+
    "\33\0\1\24\4\0\1\24\1\0\14\24\1\105\10\24"+
    "\33\0\1\24\4\0\1\24\1\0\1\106\24\24\33\0"+
    "\1\24\4\0\1\24\1\0\1\107\6\24\1\110\15\24"+
    "\33\0\1\24\4\0\1\24\1\0\24\24\1\111\33\0"+
    "\1\24\4\0\1\24\1\0\4\24\1\112\20\24\33\0"+
    "\1\24\4\0\1\24\1\0\1\113\24\24\71\0\1\114"+
    "\7\0\2\50\4\0\61\50\13\0\1\115\74\0\1\24"+
    "\4\0\1\24\1\0\1\116\17\24\1\117\4\24\33\0"+
    "\1\24\4\0\1\24\1\0\11\24\1\120\13\24\33\0"+
    "\1\24\4\0\1\24\1\0\1\121\24\24\33\0\1\24"+
    "\4\0\1\24\1\0\25\24\10\0\1\122\22\0\1\24"+
    "\4\0\1\24\1\0\16\24\1\123\1\24\1\124\4\24"+
    "\73\0\1\125\26\0\1\24\4\0\1\24\1\0\25\24"+
    "\7\0\1\126\23\0\1\24\4\0\1\24\1\0\25\24"+
    "\7\0\1\127\63\0\1\130\26\0\1\24\4\0\1\24"+
    "\1\0\11\24\1\131\13\24\33\0\1\24\4\0\1\24"+
    "\1\0\4\24\1\132\20\24\100\0\1\133\66\0\1\134"+
    "\21\0\1\24\4\0\1\24\1\0\16\24\1\135\6\24"+
    "\33\0\1\24\4\0\1\24\1\0\4\24\1\136\20\24"+
    "\33\0\1\24\4\0\1\24\1\0\4\24\1\137\20\24"+
    "\71\0\1\140\75\0\1\141\21\0\1\24\4\0\1\24"+
    "\1\0\11\24\1\142\13\24\72\0\1\143\27\0\1\24"+
    "\4\0\1\24\1\0\17\24\1\144\5\24\33\0\1\24"+
    "\4\0\1\24\1\0\3\24\1\145\21\24\33\0\1\24"+
    "\4\0\1\24\1\0\24\24\1\146\33\0\1\24\4\0"+
    "\1\24\1\0\17\24\1\147\5\24\33\0\1\24\4\0"+
    "\1\24\1\0\23\24\1\150\1\24\33\0\1\24\4\0"+
    "\1\24\1\0\11\24\1\151\13\24\33\0\1\24\4\0"+
    "\1\24\1\0\21\24\1\152\3\24\33\0\1\24\4\0"+
    "\1\24\1\0\23\24\1\153\1\24\20\0\1\154\12\0"+
    "\1\24\4\0\1\24\1\0\13\24\1\155\10\24\1\156"+
    "\42\0\1\157\33\0\1\160\2\0\13\161\1\0\53\161"+
    "\21\0\1\24\4\0\1\24\1\0\11\24\1\162\5\24"+
    "\1\163\5\24\33\0\1\24\4\0\1\24\1\0\1\164"+
    "\24\24\33\0\1\24\4\0\1\24\1\0\1\165\24\24"+
    "\33\0\1\24\4\0\1\24\1\0\11\24\1\166\13\24"+
    "\100\0\1\167\21\0\1\24\4\0\1\24\1\0\11\24"+
    "\1\170\13\24\33\0\1\24\4\0\1\24\1\0\7\24"+
    "\1\171\15\24\53\0\1\172\113\0\1\173\66\0\1\174"+
    "\43\0\1\175\44\0\1\24\4\0\1\24\1\0\4\24"+
    "\1\176\20\24\33\0\1\24\4\0\1\24\1\0\12\24"+
    "\1\177\12\24\46\0\1\200\71\0\1\201\66\0\1\202"+
    "\66\0\1\203\50\0\1\24\4\0\1\24\1\0\7\24"+
    "\1\204\15\24\60\0\1\205\41\0\1\24\4\0\1\24"+
    "\1\0\20\24\1\206\4\24\33\0\1\24\4\0\1\24"+
    "\1\0\21\24\1\207\3\24\33\0\1\24\4\0\1\24"+
    "\1\0\7\24\1\210\15\24\33\0\1\24\4\0\1\24"+
    "\1\0\20\24\1\211\4\24\33\0\1\24\4\0\1\24"+
    "\1\0\25\24\7\0\1\212\23\0\1\24\4\0\1\24"+
    "\1\0\13\24\1\213\11\24\33\0\1\24\4\0\1\24"+
    "\1\0\1\214\24\24\45\0\1\215\54\0\1\24\4\0"+
    "\1\24\1\0\11\24\1\216\13\24\76\0\1\217\62\0"+
    "\1\220\6\0\13\161\1\221\53\161\21\0\1\24\4\0"+
    "\1\24\1\0\25\24\7\0\1\222\23\0\1\24\4\0"+
    "\1\24\1\0\25\24\7\0\1\223\23\0\1\24\4\0"+
    "\1\24\1\0\16\24\1\224\6\24\33\0\1\24\4\0"+
    "\1\24\1\0\25\24\7\0\1\225\43\0\1\226\46\0"+
    "\1\24\4\0\1\24\1\0\4\24\1\227\20\24\33\0"+
    "\1\24\4\0\1\24\1\0\16\24\1\230\6\24\75\0"+
    "\1\231\37\0\1\232\2\0\1\233\75\0\1\234\53\0"+
    "\1\235\54\0\1\24\4\0\1\24\1\0\1\236\24\24"+
    "\60\0\1\237\70\0\1\240\61\0\1\241\44\0\1\24"+
    "\4\0\1\24\1\0\12\24\1\242\12\24\33\0\1\24"+
    "\4\0\1\24\1\0\4\24\1\243\20\24\33\0\1\24"+
    "\4\0\1\24\1\0\25\24\7\0\1\244\23\0\1\24"+
    "\4\0\1\24\1\0\17\24\1\245\5\24\33\0\1\24"+
    "\4\0\1\24\1\0\5\24\1\246\17\24\72\0\1\247"+
    "\27\0\1\24\4\0\1\24\1\0\11\24\1\250\13\24"+
    "\42\0\1\251\57\0\1\24\4\0\1\24\1\0\25\24"+
    "\7\0\1\252\70\0\1\253\40\0\1\254\26\0\13\161"+
    "\1\255\53\161\60\0\1\256\66\0\1\257\27\0\1\24"+
    "\4\0\1\24\1\0\10\24\1\260\14\24\72\0\1\261"+
    "\36\0\1\262\57\0\1\24\4\0\1\24\1\0\25\24"+
    "\10\0\1\263\63\0\1\264\52\0\1\265\61\0\1\266"+
    "\23\0\1\267\52\0\1\270\100\0\1\271\24\0\1\24"+
    "\4\0\1\24\1\0\13\24\1\272\11\24\20\0\1\273"+
    "\113\0\1\274\54\0\1\24\4\0\1\24\1\0\4\24"+
    "\1\275\20\24\33\0\1\24\4\0\1\24\1\0\17\24"+
    "\1\276\5\24\100\0\1\277\21\0\1\24\4\0\1\24"+
    "\1\0\23\24\1\300\1\24\33\0\1\24\4\0\1\24"+
    "\1\0\4\24\1\301\20\24\65\0\1\302\34\0\1\24"+
    "\4\0\1\24\1\0\21\24\1\303\3\24\72\0\1\304"+
    "\72\0\1\305\66\0\1\306\2\0\13\161\1\307\53\161"+
    "\64\0\1\310\45\0\1\311\44\0\1\24\4\0\1\24"+
    "\1\0\4\24\1\312\20\24\60\0\1\313\106\0\1\314"+
    "\42\0\1\315\63\0\1\316\115\0\1\317\62\0\1\320"+
    "\25\0\1\24\4\0\1\24\1\0\25\24\7\0\1\321"+
    "\35\0\1\322\67\0\1\323\53\0\1\24\4\0\1\24"+
    "\1\0\23\24\1\324\1\24\33\0\1\24\4\0\1\24"+
    "\1\0\7\24\1\325\15\24\63\0\1\326\36\0\1\24"+
    "\4\0\1\24\1\0\14\24\1\327\10\24\33\0\1\24"+
    "\4\0\1\24\1\0\11\24\1\330\13\24\76\0\1\331"+
    "\23\0\1\24\4\0\1\24\1\0\25\24\7\0\1\332"+
    "\67\0\1\333\61\0\1\334\66\0\1\335\21\0\1\336"+
    "\141\0\1\337\33\0\1\340\54\0\1\24\4\0\1\24"+
    "\1\0\13\24\1\341\11\24\52\0\1\342\76\0\1\343"+
    "\101\0\1\344\43\0\1\345\74\0\1\346\100\0\1\347"+
    "\42\0\1\350\72\0\1\351\47\0\1\24\4\0\1\24"+
    "\1\0\7\24\1\352\15\24\33\0\1\24\4\0\1\24"+
    "\1\0\13\24\1\353\11\24\20\0\1\354\101\0\1\24"+
    "\4\0\1\24\1\0\13\24\1\355\11\24\33\0\1\24"+
    "\4\0\1\24\1\0\4\24\1\356\20\24\72\0\1\357"+
    "\74\0\1\360\66\0\1\361\46\0\1\362\105\0\1\363"+
    "\14\0\1\364\137\0\1\365\32\0\1\366\72\0\1\367"+
    "\71\0\1\370\111\0\1\371\40\0\1\372\75\0\1\373"+
    "\107\0\1\374\41\0\1\375\35\0\1\376\12\0\1\24"+
    "\4\0\1\24\1\0\25\24\33\0\1\24\4\0\1\24"+
    "\1\0\3\24\1\377\1\u0100\2\24\1\u0101\15\24\61\0"+
    "\1\u0102\25\0\1\u0103\131\0\1\u0104\103\0\1\u0105\60\0"+
    "\1\u0106\51\0\1\u0107\71\0\1\u0108\63\0\1\u0109\66\0"+
    "\1\u010a\107\0\1\u010b\70\0\1\u010c\44\0\1\u010d\43\0"+
    "\1\24\4\0\1\24\1\0\4\24\1\u010e\20\24\20\0"+
    "\1\u010f\12\0\1\24\4\0\1\24\1\0\13\24\1\u0110"+
    "\11\24\75\0\1\u0111\47\0\1\u0112\65\0\1\u0113\31\0"+
    "\1\u0114\123\0\1\u0115\56\0\1\u0116\72\0\1\u0117\107\0"+
    "\1\u0118\45\0\1\u0119\67\0\1\u011a\47\0\1\24\4\0"+
    "\1\24\1\0\10\24\1\u011b\14\24\62\0\1\u011c\24\0"+
    "\1\u011d\12\0\1\24\4\0\1\24\1\0\25\24\74\0"+
    "\1\u011e\44\0\1\u011f\77\0\1\u0120\70\0\1\u0121\77\0"+
    "\1\u0122\36\0\1\u0123\75\0\1\u0124\64\0\1\u0125\76\0"+
    "\1\u0126\36\0\1\24\4\0\1\24\1\0\7\24\1\u0127"+
    "\15\24\46\0\1\u0128\103\0\1\u0129\63\0\1\u012a\71\0"+
    "\1\u012b\23\0\1\u012c\110\0\1\u012d\116\0\1\u012e\51\0"+
    "\1\u012f\31\0\1\u0130\122\0\1\u0131\100\0\1\u0132\46\0"+
    "\1\u0133\62\0\1\u0134\103\0\1\u0135\27\0\1\u0136\66\0"+
    "\1\u0137\127\0\1\u0138\56\0\1\u0139\100\0\1\u013a\47\0"+
    "\1\u013b\75\0\1\u013c\62\0\1\u013d\71\0\1\u013e\112\0"+
    "\1\u013f\56\0\1\u0140\55\0\1\u0141\57\0\1\u0142\115\0"+
    "\1\u0143\33\0\1\u0144\116\0\1\u0145\47\0\1\u0146\66\0"+
    "\1\u0147\106\0\1\u0148\46\0\1\u0149\73\0\1\u014a\54\0"+
    "\1\u014b\103\0\1\u014c\64\0\1\u014d\47\0\1\u014e\66\0"+
    "\1\u014f\122\0\1\u0150\52\0\1\u0151\61\0\1\u0152\72\0"+
    "\1\u0153\105\0\1\u0154\34\0\1\u0155\116\0\1\u0156\53\0"+
    "\1\u0157\63\0\1\u0158\100\0\1\u0159\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15730];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\2\11\1\1\5\11\1\1\1\11"+
    "\23\1\2\11\1\1\1\11\1\0\1\11\2\0\3\11"+
    "\5\1\1\0\2\1\1\0\2\1\2\0\3\1\2\0"+
    "\1\1\1\0\11\1\2\0\4\1\1\0\2\1\4\0"+
    "\2\1\2\0\3\1\2\0\1\1\1\0\10\1\1\0"+
    "\2\1\3\0\5\1\1\0\2\1\4\0\2\1\3\0"+
    "\1\11\1\1\1\11\4\1\1\0\2\1\1\0\1\1"+
    "\5\0\1\1\2\0\2\1\5\0\1\1\1\11\4\1"+
    "\1\0\2\1\1\0\1\1\1\11\6\0\1\1\1\0"+
    "\1\11\3\0\1\11\1\0\1\11\1\0\1\1\2\0"+
    "\2\1\1\0\2\1\1\0\1\1\3\0\1\1\2\0"+
    "\1\1\3\0\1\11\5\0\2\1\1\0\2\1\5\0"+
    "\1\1\2\0\1\1\4\0\1\11\1\1\2\0\2\1"+
    "\1\0\2\1\2\0\2\11\1\0\1\11\1\0\1\11"+
    "\6\0\1\11\1\0\3\1\5\0\2\11\5\0\1\1"+
    "\1\0\1\1\6\0\1\11\3\0\1\1\11\0\2\11"+
    "\1\1\3\0\1\11\11\0\1\11\6\0\1\11\5\0"+
    "\1\11\10\0\1\11\6\0\1\11\4\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return symbol(sym.EOF);
            }  // fall though
            case 346: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <"+yytext()+">");
            }
            // fall through
          case 74: break;
          case 2:
            { /* do nothing */
            }
            // fall through
          case 75: break;
          case 3:
            { return symbol(sym.NOT);
            }
            // fall through
          case 76: break;
          case 4:
            { return symbol(sym.LPAREN);
            }
            // fall through
          case 77: break;
          case 5:
            { return symbol(sym.RPAREN);
            }
            // fall through
          case 78: break;
          case 6:
            { return symbol(sym.TIMES);
            }
            // fall through
          case 79: break;
          case 7:
            { return symbol(sym.PLUS);
            }
            // fall through
          case 80: break;
          case 8:
            { return symbol(sym.COMMA);
            }
            // fall through
          case 81: break;
          case 9:
            { return symbol(sym.MINUS);
            }
            // fall through
          case 82: break;
          case 10:
            { return symbol(sym.DOT);
            }
            // fall through
          case 83: break;
          case 11:
            { return symbol(sym.DIVIDE);
            }
            // fall through
          case 84: break;
          case 12:
            { return symbol(sym.NUM, new Integer(yytext()));
            }
            // fall through
          case 85: break;
          case 13:
            { return symbol(sym.SEMI);
            }
            // fall through
          case 86: break;
          case 14:
            { return symbol(sym.LT);
            }
            // fall through
          case 87: break;
          case 15:
            { return symbol(sym.ASSIGN);
            }
            // fall through
          case 88: break;
          case 16:
            { return symbol(sym.GT);
            }
            // fall through
          case 89: break;
          case 17:
            { return symbol(sym.IDENT, new String(yytext()));
            }
            // fall through
          case 90: break;
          case 18:
            { return symbol(sym.LCURLY);
            }
            // fall through
          case 91: break;
          case 19:
            { return symbol(sym.RCURLY);
            }
            // fall through
          case 92: break;
          case 20:
            { return symbol(sym.NE);
            }
            // fall through
          case 93: break;
          case 21:
            { return symbol(sym.STRING, new String(yytext()));
            }
            // fall through
          case 94: break;
          case 22:
            { return symbol(sym.LE);
            }
            // fall through
          case 95: break;
          case 23:
            { return symbol(sym.EQ);
            }
            // fall through
          case 96: break;
          case 24:
            { return symbol(sym.GE);
            }
            // fall through
          case 97: break;
          case 25:
            { return symbol(sym.AND);
            }
            // fall through
          case 98: break;
          case 26:
            { return symbol(sym.EVERY);
            }
            // fall through
          case 99: break;
          case 27:
            { return symbol(sym.ILE);
            }
            // fall through
          case 100: break;
          case 28:
            { return symbol(sym.ISE);
            }
            // fall through
          case 101: break;
          case 29:
            { return symbol(sym.LISTREMOVE);
            }
            // fall through
          case 102: break;
          case 30:
            { return symbol(sym.YAZ);
            }
            // fall through
          case 103: break;
          case 31:
            { return symbol(sym.CONTINUE);
            }
            // fall through
          case 104: break;
          case 32:
            { return symbol(sym.LISTADD);
            }
            // fall through
          case 105: break;
          case 33:
            { return symbol(sym.FUNCTION);
            }
            // fall through
          case 106: break;
          case 34:
            { return symbol(sym.BREAK);
            }
            // fall through
          case 107: break;
          case 35:
            { return symbol(sym.OR);
            }
            // fall through
          case 108: break;
          case 36:
            { return symbol(sym.END);
            }
            // fall through
          case 109: break;
          case 37:
            { return symbol(sym.EGER);
            }
            // fall through
          case 110: break;
          case 38:
            { return symbol(sym.STREQ);
            }
            // fall through
          case 111: break;
          case 39:
            { return symbol(sym.FOR);
            }
            // fall through
          case 112: break;
          case 40:
            { return symbol((sym.LIST));
            }
            // fall through
          case 113: break;
          case 41:
            { return symbol(sym.YADA);
            }
            // fall through
          case 114: break;
          case 42:
            { return symbol(sym.BEGIN);
            }
            // fall through
          case 115: break;
          case 43:
            { return symbol(sym.DEGIL);
            }
            // fall through
          case 116: break;
          case 44:
            { return symbol(sym.TRUE);
            }
            // fall through
          case 117: break;
          case 45:
            { return symbol(sym.VARIABLE);
            }
            // fall through
          case 118: break;
          case 46:
            { /* ignore */
            }
            // fall through
          case 119: break;
          case 47:
            { return symbol(sym.VALUE);
            }
            // fall through
          case 120: break;
          case 48:
            { return symbol(sym.ART);
            }
            // fall through
          case 121: break;
          case 49:
            { return symbol(sym.RETURN);
            }
            // fall through
          case 122: break;
          case 50:
            { return symbol(sym.LISTDELETEVARIABLE);
            }
            // fall through
          case 123: break;
          case 51:
            { return symbol(sym.POSITION);
            }
            // fall through
          case 124: break;
          case 52:
            { return symbol(sym.RANDOM);
            }
            // fall through
          case 125: break;
          case 53:
            { return symbol(sym.FALSE);
            }
            // fall through
          case 126: break;
          case 54:
            { return symbol(sym.CAGIR);
            }
            // fall through
          case 127: break;
          case 55:
            { return symbol(sym.ARASINDA);
            }
            // fall through
          case 128: break;
          case 56:
            { return symbol(sym.INSIDE);
            }
            // fall through
          case 129: break;
          case 57:
            { return symbol(sym.TOLIST);
            }
            // fall through
          case 130: break;
          case 58:
            { return symbol(sym.AZ);
            }
            // fall through
          case 131: break;
          case 59:
            { return symbol(sym.CONCATENATE);
            }
            // fall through
          case 132: break;
          case 60:
            { return symbol(sym.LISTUPDATE);
            }
            // fall through
          case 133: break;
          case 61:
            { return symbol(sym.DEGIS);
            }
            // fall through
          case 134: break;
          case 62:
            { return symbol(sym.STRNOTEQ);
            }
            // fall through
          case 135: break;
          case 63:
            { return symbol(sym.READSTR);
            }
            // fall through
          case 136: break;
          case 64:
            { return symbol(sym.LISTGET);
            }
            // fall through
          case 137: break;
          case 65:
            { return symbol(sym.READINT);
            }
            // fall through
          case 138: break;
          case 66:
            { return symbol(sym.EXIT);
            }
            // fall through
          case 139: break;
          case 67:
            { return symbol(sym.LENGTH);
            }
            // fall through
          case 140: break;
          case 68:
            { return symbol(sym.WHILE);
            }
            // fall through
          case 141: break;
          case 69:
            { return symbol(sym.LISTCLEAR);
            }
            // fall through
          case 142: break;
          case 70:
            { return symbol(sym.MODE);
            }
            // fall through
          case 143: break;
          case 71:
            { return symbol(sym.LISTLENGTH);
            }
            // fall through
          case 144: break;
          case 72:
            { return symbol(sym.SUBSTRING);
            }
            // fall through
          case 145: break;
          case 73:
            { return symbol(sym.LISTINDEX);
            }
            // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
