// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lcalc.flex

import java_cup.runtime.*;
      

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\5\0\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\12\21\1\0\1\22\1\23\1\24"+
    "\1\25\2\0\32\26\1\0\1\27\2\0\1\26\1\0"+
    "\1\30\1\31\1\32\1\33\1\34\1\26\1\35\1\36"+
    "\1\37\1\26\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\26\1\46\1\47\1\50\1\51\1\52\2\26\1\53"+
    "\1\54\1\55\1\0\1\56\7\0\1\3\141\0\1\57"+
    "\16\0\1\60\5\0\1\61\42\0\1\62\21\0\1\63"+
    "\55\0\1\64\u01c8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\20\20\1\21\1\22\1\1\1\23\1\0\1\24"+
    "\2\0\1\25\1\26\1\27\5\20\1\0\2\20\1\0"+
    "\2\20\2\0\3\20\2\0\1\20\1\0\7\20\1\30"+
    "\1\20\3\0\4\20\1\0\2\20\4\0\2\20\2\0"+
    "\1\31\1\32\1\33\1\0\1\34\1\20\1\35\5\20"+
    "\1\36\2\20\1\0\1\20\1\37\3\0\3\20\1\40"+
    "\1\20\1\0\2\20\5\0\1\41\1\20\1\42\1\43"+
    "\1\44\5\20\1\0\1\20\1\45\1\0\1\20\5\0"+
    "\1\20\1\0\1\46\1\20\1\47\2\0\1\50\1\0"+
    "\1\51\1\0\1\20\2\0\1\20\1\52\1\0\2\20"+
    "\1\0\1\20\1\53\1\0\1\54\4\0\1\20\3\0"+
    "\1\55\1\0\1\56\1\57\2\0\2\20\1\0\2\20"+
    "\1\0\1\20\1\60\1\0\1\61\2\0\1\20\4\0"+
    "\1\62\2\0\2\20\1\0\2\20\3\0\1\61\1\0"+
    "\1\63\1\64\6\0\1\65\2\20\1\0\1\66\1\67"+
    "\3\0\1\61\1\0\1\70\1\71\1\0\1\72\3\0"+
    "\1\20\1\73\1\20\3\0\1\74\3\0\1\75\1\0"+
    "\1\20\1\0\1\76\1\0\1\77\5\0\1\20\7\0"+
    "\1\100\1\101\11\0\1\102\1\103\12\0\1\104\1\105"+
    "\3\0\1\106\1\107\2\0\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\152\0\237\0\324\0\65\0\65"+
    "\0\u0109\0\65\0\65\0\65\0\65\0\65\0\u013e\0\65"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\65\0\65\0\u0562\0\65\0\324"+
    "\0\65\0\u0597\0\u05cc\0\65\0\65\0\65\0\u0601\0\u0636"+
    "\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0212\0\u0212\0\u0212"+
    "\0\u0fbc\0\65\0\u0ff1\0\65\0\u1026\0\u105b\0\u1090\0\u10c5"+
    "\0\u10fa\0\u0212\0\u112f\0\u1164\0\u1199\0\u11ce\0\u0212\0\u1203"+
    "\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u0212\0\u1341\0\u1376"+
    "\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u0212"+
    "\0\u151e\0\65\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u0212\0\u1730\0\u1765\0\u179a\0\u17cf"+
    "\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\65\0\u190d\0\u0212"+
    "\0\u1942\0\u1977\0\65\0\u19ac\0\65\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3"+
    "\0\65\0\u1c28\0\65\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31"+
    "\0\u1d66\0\u1d9b\0\u1dd0\0\65\0\u1e05\0\65\0\u1e3a\0\u1e6f"+
    "\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017"+
    "\0\65\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a"+
    "\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332"+
    "\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\65"+
    "\0\u0212\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\65"+
    "\0\u2618\0\u264d\0\u2682\0\u0212\0\u0212\0\u26b7\0\u26ec\0\u2721"+
    "\0\65\0\u2756\0\65\0\65\0\u278b\0\65\0\u27c0\0\u27f5"+
    "\0\u282a\0\u285f\0\u0212\0\u2894\0\u28c9\0\u28fe\0\u2933\0\65"+
    "\0\u2968\0\u299d\0\u29d2\0\65\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6"+
    "\0\u2adb\0\65\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19"+
    "\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\65"+
    "\0\u0212\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff"+
    "\0\u2f34\0\u2f69\0\65\0\65\0\u2f9e\0\u2fd3\0\u3008\0\u303d"+
    "\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u3146\0\u317b\0\65\0\65"+
    "\0\u31b0\0\u31e5\0\u321a\0\65\0\65\0\u324f\0\u3284\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\2\1\25"+
    "\1\26\1\24\1\27\1\30\1\24\1\31\1\32\1\33"+
    "\1\34\2\24\1\35\1\36\1\37\1\40\1\24\1\41"+
    "\1\42\1\43\1\24\1\44\1\45\1\46\5\2\67\0"+
    "\1\3\106\0\1\47\40\0\10\50\1\51\16\50\1\52"+
    "\35\50\13\0\1\53\72\0\1\17\67\0\1\54\64\0"+
    "\1\55\64\0\1\56\61\0\1\24\4\0\1\24\1\0"+
    "\25\24\31\0\1\24\4\0\1\24\1\0\16\24\1\57"+
    "\1\24\1\60\3\24\1\61\31\0\1\24\4\0\1\24"+
    "\1\0\1\62\6\24\1\63\15\24\3\0\1\64\25\0"+
    "\1\24\4\0\1\24\1\0\4\24\1\65\7\24\1\66"+
    "\10\24\3\0\1\67\25\0\1\24\4\0\1\24\1\0"+
    "\10\24\1\70\1\71\13\24\5\0\1\72\1\0\1\73"+
    "\21\0\1\24\4\0\1\24\1\0\4\24\1\74\20\24"+
    "\31\0\1\24\4\0\1\24\1\0\11\24\1\75\5\24"+
    "\1\76\5\24\2\0\1\77\4\0\1\100\21\0\1\24"+
    "\4\0\1\24\1\0\4\24\1\101\20\24\6\0\1\102"+
    "\22\0\1\24\4\0\1\24\1\0\7\24\1\103\15\24"+
    "\31\0\1\24\4\0\1\24\1\0\11\24\1\104\13\24"+
    "\31\0\1\24\4\0\1\24\1\0\14\24\1\105\10\24"+
    "\31\0\1\24\4\0\1\24\1\0\1\106\24\24\31\0"+
    "\1\24\4\0\1\24\1\0\1\107\6\24\1\110\15\24"+
    "\31\0\1\24\4\0\1\24\1\0\24\24\1\111\31\0"+
    "\1\24\4\0\1\24\1\0\4\24\1\112\20\24\31\0"+
    "\1\24\4\0\1\24\1\0\1\113\24\24\40\0\1\114"+
    "\32\0\1\115\1\0\2\50\4\0\57\50\13\0\1\116"+
    "\72\0\1\24\4\0\1\24\1\0\1\117\17\24\1\120"+
    "\4\24\31\0\1\24\4\0\1\24\1\0\11\24\1\121"+
    "\13\24\31\0\1\24\4\0\1\24\1\0\1\122\24\24"+
    "\31\0\1\24\4\0\1\24\1\0\25\24\7\0\1\123"+
    "\21\0\1\24\4\0\1\24\1\0\16\24\1\124\1\24"+
    "\1\125\4\24\51\0\1\126\44\0\1\24\4\0\1\24"+
    "\1\0\25\24\5\0\1\127\23\0\1\24\4\0\1\24"+
    "\1\0\25\24\5\0\1\130\45\0\1\131\42\0\1\24"+
    "\4\0\1\24\1\0\11\24\1\132\13\24\31\0\1\24"+
    "\4\0\1\24\1\0\4\24\1\133\20\24\44\0\1\134"+
    "\67\0\1\135\46\0\1\24\4\0\1\24\1\0\16\24"+
    "\1\136\6\24\31\0\1\24\4\0\1\24\1\0\4\24"+
    "\1\137\20\24\31\0\1\24\4\0\1\24\1\0\4\24"+
    "\1\140\20\24\47\0\1\141\64\0\1\142\46\0\1\24"+
    "\4\0\1\24\1\0\11\24\1\143\13\24\56\0\1\144"+
    "\37\0\1\24\4\0\1\24\1\0\17\24\1\145\5\24"+
    "\31\0\1\24\4\0\1\24\1\0\3\24\1\146\21\24"+
    "\31\0\1\24\4\0\1\24\1\0\24\24\1\147\31\0"+
    "\1\24\4\0\1\24\1\0\17\24\1\150\5\24\31\0"+
    "\1\24\4\0\1\24\1\0\23\24\1\151\1\24\31\0"+
    "\1\24\4\0\1\24\1\0\11\24\1\152\13\24\31\0"+
    "\1\24\4\0\1\24\1\0\21\24\1\153\3\24\31\0"+
    "\1\24\4\0\1\24\1\0\23\24\1\154\1\24\16\0"+
    "\1\155\12\0\1\24\4\0\1\24\1\0\13\24\1\156"+
    "\10\24\1\157\72\0\1\160\42\0\1\161\24\0\13\162"+
    "\1\0\51\162\21\0\1\24\4\0\1\24\1\0\11\24"+
    "\1\163\5\24\1\164\5\24\31\0\1\24\4\0\1\24"+
    "\1\0\1\165\24\24\31\0\1\24\4\0\1\24\1\0"+
    "\1\166\24\24\31\0\1\24\4\0\1\24\1\0\11\24"+
    "\1\167\13\24\51\0\1\170\44\0\1\24\4\0\1\24"+
    "\1\0\11\24\1\171\13\24\31\0\1\24\4\0\1\24"+
    "\1\0\7\24\1\172\15\24\71\0\1\173\37\0\1\174"+
    "\2\0\1\175\73\0\1\176\51\0\1\177\52\0\1\24"+
    "\4\0\1\24\1\0\4\24\1\200\20\24\31\0\1\24"+
    "\4\0\1\24\1\0\12\24\1\201\12\24\56\0\1\202"+
    "\66\0\1\203\57\0\1\204\42\0\1\24\4\0\1\24"+
    "\1\0\7\24\1\205\15\24\31\0\1\24\4\0\1\24"+
    "\1\0\20\24\1\206\4\24\31\0\1\24\4\0\1\24"+
    "\1\0\21\24\1\207\3\24\31\0\1\24\4\0\1\24"+
    "\1\0\7\24\1\210\15\24\31\0\1\24\4\0\1\24"+
    "\1\0\20\24\1\211\4\24\31\0\1\24\4\0\1\24"+
    "\1\0\25\24\6\0\1\212\22\0\1\24\4\0\1\24"+
    "\1\0\13\24\1\213\11\24\31\0\1\24\4\0\1\24"+
    "\1\0\1\214\24\24\43\0\1\215\52\0\1\24\4\0"+
    "\1\24\1\0\11\24\1\216\13\24\73\0\1\217\64\0"+
    "\1\220\1\0\13\162\1\221\51\162\21\0\1\24\4\0"+
    "\1\24\1\0\25\24\6\0\1\222\22\0\1\24\4\0"+
    "\1\24\1\0\25\24\6\0\1\223\22\0\1\24\4\0"+
    "\1\24\1\0\16\24\1\224\6\24\31\0\1\24\4\0"+
    "\1\24\1\0\25\24\6\0\1\225\31\0\1\226\55\0"+
    "\1\24\4\0\1\24\1\0\4\24\1\227\20\24\31\0"+
    "\1\24\4\0\1\24\1\0\16\24\1\230\6\24\52\0"+
    "\1\231\70\0\1\232\57\0\1\233\22\0\1\234\51\0"+
    "\1\235\74\0\1\236\24\0\1\24\4\0\1\24\1\0"+
    "\1\237\24\24\16\0\1\240\111\0\1\241\52\0\1\24"+
    "\4\0\1\24\1\0\12\24\1\242\12\24\31\0\1\24"+
    "\4\0\1\24\1\0\4\24\1\243\20\24\31\0\1\24"+
    "\4\0\1\24\1\0\25\24\5\0\1\244\23\0\1\24"+
    "\4\0\1\24\1\0\17\24\1\245\5\24\31\0\1\24"+
    "\4\0\1\24\1\0\5\24\1\246\17\24\63\0\1\247"+
    "\32\0\1\24\4\0\1\24\1\0\11\24\1\250\13\24"+
    "\40\0\1\251\55\0\1\24\4\0\1\24\1\0\25\24"+
    "\6\0\1\252\47\0\1\253\102\0\1\254\13\162\1\255"+
    "\51\162\62\0\1\256\45\0\1\257\42\0\1\24\4\0"+
    "\1\24\1\0\10\24\1\260\14\24\56\0\1\261\37\0"+
    "\1\24\4\0\1\24\1\0\25\24\7\0\1\262\61\0"+
    "\1\263\42\0\1\264\65\0\1\265\72\0\1\266\37\0"+
    "\1\24\4\0\1\24\1\0\13\24\1\267\11\24\43\0"+
    "\1\270\65\0\1\271\51\0\1\24\4\0\1\24\1\0"+
    "\4\24\1\272\20\24\31\0\1\24\4\0\1\24\1\0"+
    "\17\24\1\273\5\24\61\0\1\274\34\0\1\24\4\0"+
    "\1\24\1\0\23\24\1\275\1\24\31\0\1\24\4\0"+
    "\1\24\1\0\4\24\1\276\20\24\73\0\1\277\22\0"+
    "\1\24\4\0\1\24\1\0\21\24\1\300\3\24\74\0"+
    "\1\301\6\0\1\302\56\0\13\162\1\303\51\162\63\0"+
    "\1\304\34\0\1\305\52\0\1\24\4\0\1\24\1\0"+
    "\4\24\1\306\20\24\50\0\1\307\74\0\1\310\57\0"+
    "\1\311\55\0\1\312\51\0\1\24\4\0\1\24\1\0"+
    "\25\24\6\0\1\313\35\0\1\314\70\0\1\315\45\0"+
    "\1\24\4\0\1\24\1\0\23\24\1\316\1\24\31\0"+
    "\1\24\4\0\1\24\1\0\7\24\1\317\15\24\16\0"+
    "\1\320\77\0\1\24\4\0\1\24\1\0\14\24\1\321"+
    "\10\24\31\0\1\24\4\0\1\24\1\0\11\24\1\322"+
    "\13\24\16\0\1\323\77\0\1\24\4\0\1\24\1\0"+
    "\25\24\5\0\1\324\55\0\1\325\24\0\1\326\114\0"+
    "\1\327\51\0\1\330\55\0\1\24\4\0\1\24\1\0"+
    "\13\24\1\331\11\24\44\0\1\332\67\0\1\333\60\0"+
    "\1\334\74\0\1\335\64\0\1\336\103\0\1\337\41\0"+
    "\1\340\46\0\1\24\4\0\1\24\1\0\7\24\1\341"+
    "\15\24\31\0\1\24\4\0\1\24\1\0\13\24\1\342"+
    "\11\24\57\0\1\343\36\0\1\24\4\0\1\24\1\0"+
    "\13\24\1\344\11\24\31\0\1\24\4\0\1\24\1\0"+
    "\4\24\1\345\20\24\54\0\1\346\71\0\1\347\43\0"+
    "\1\350\47\0\1\351\134\0\1\352\44\0\1\353\67\0"+
    "\1\354\52\0\1\355\67\0\1\356\110\0\1\357\40\0"+
    "\1\360\33\0\1\361\12\0\1\24\4\0\1\24\1\0"+
    "\25\24\31\0\1\24\4\0\1\24\1\0\3\24\1\362"+
    "\1\363\2\24\1\364\15\24\71\0\1\365\43\0\1\366"+
    "\67\0\1\367\66\0\1\370\25\0\1\371\121\0\1\372"+
    "\64\0\1\373\62\0\1\374\67\0\1\375\41\0\1\24"+
    "\4\0\1\24\1\0\4\24\1\376\20\24\16\0\1\377"+
    "\12\0\1\24\4\0\1\24\1\0\13\24\1\u0100\11\24"+
    "\56\0\1\u0101\67\0\1\u0102\64\0\1\u0103\50\0\1\u0104"+
    "\35\0\1\u0105\64\0\1\u0106\116\0\1\u0107\45\0\1\24"+
    "\4\0\1\24\1\0\10\24\1\u0108\14\24\60\0\1\u0109"+
    "\22\0\1\u010a\12\0\1\24\4\0\1\24\1\0\25\24"+
    "\44\0\1\u010b\36\0\1\u010c\136\0\1\u010d\44\0\1\u010e"+
    "\73\0\1\u010f\66\0\1\u0110\34\0\1\24\4\0\1\24"+
    "\1\0\7\24\1\u0111\15\24\44\0\1\u0112\101\0\1\u0113"+
    "\45\0\1\u0114\62\0\1\u0115\103\0\1\u0116\45\0\1\u0117"+
    "\117\0\1\u0118\43\0\1\u0119\76\0\1\u011a\44\0\1\u011b"+
    "\71\0\1\u011c\73\0\1\u011d\55\0\1\u011e\71\0\1\u011f"+
    "\55\0\1\u0120\76\0\1\u0121\47\0\1\u0122\60\0\1\u0123"+
    "\64\0\1\u0124\110\0\1\u0125\53\0\1\u0126\67\0\1\u0127"+
    "\61\0\1\u0128\70\0\1\u0129\56\0\1\u012a\64\0\1\u012b"+
    "\106\0\1\u012c\35\0\1\u012d\101\0\1\u012e\75\0\1\u012f"+
    "\53\0\1\u0130\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12985];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\2\11\1\1\5\11\1\1\1\11"+
    "\23\1\2\11\1\1\1\11\1\0\1\11\2\0\3\11"+
    "\5\1\1\0\2\1\1\0\2\1\2\0\3\1\2\0"+
    "\1\1\1\0\11\1\3\0\4\1\1\0\2\1\4\0"+
    "\2\1\2\0\3\1\1\0\1\11\1\1\1\11\10\1"+
    "\1\0\2\1\3\0\5\1\1\0\2\1\5\0\2\1"+
    "\1\11\7\1\1\0\2\1\1\0\1\1\5\0\1\1"+
    "\1\0\1\11\2\1\2\0\1\11\1\0\1\11\1\0"+
    "\1\1\2\0\2\1\1\0\2\1\1\0\1\1\1\11"+
    "\1\0\1\11\4\0\1\1\3\0\1\11\1\0\1\11"+
    "\1\1\2\0\2\1\1\0\2\1\1\0\1\1\1\11"+
    "\1\0\1\1\2\0\1\1\4\0\1\1\2\0\2\1"+
    "\1\0\2\1\3\0\1\1\1\0\1\11\1\1\6\0"+
    "\1\11\2\1\1\0\2\1\3\0\1\11\1\0\2\11"+
    "\1\0\1\11\3\0\3\1\3\0\1\11\3\0\1\11"+
    "\1\0\1\1\1\0\1\1\1\0\1\11\5\0\1\1"+
    "\7\0\1\11\1\1\11\0\2\11\12\0\2\11\3\0"+
    "\2\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return symbol(sym.EOF);
            }  // fall though
            case 305: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <"+yytext()+">");
            }
            // fall through
          case 73: break;
          case 2:
            { /* do nothing */
            }
            // fall through
          case 74: break;
          case 3:
            { return symbol(sym.LPAREN);
            }
            // fall through
          case 75: break;
          case 4:
            { return symbol(sym.RPAREN);
            }
            // fall through
          case 76: break;
          case 5:
            { return symbol(sym.TIMES);
            }
            // fall through
          case 77: break;
          case 6:
            { return symbol(sym.PLUS);
            }
            // fall through
          case 78: break;
          case 7:
            { return symbol(sym.COMMA);
            }
            // fall through
          case 79: break;
          case 8:
            { return symbol(sym.MINUS);
            }
            // fall through
          case 80: break;
          case 9:
            { return symbol(sym.DOT);
            }
            // fall through
          case 81: break;
          case 10:
            { return symbol(sym.DIVIDE);
            }
            // fall through
          case 82: break;
          case 11:
            { return symbol(sym.NUM, new Integer(yytext()));
            }
            // fall through
          case 83: break;
          case 12:
            { return symbol(sym.SEMI);
            }
            // fall through
          case 84: break;
          case 13:
            { return symbol(sym.LT);
            }
            // fall through
          case 85: break;
          case 14:
            { return symbol(sym.ASSIGN);
            }
            // fall through
          case 86: break;
          case 15:
            { return symbol(sym.GT);
            }
            // fall through
          case 87: break;
          case 16:
            { return symbol(sym.IDENT, new String(yytext()));
            }
            // fall through
          case 88: break;
          case 17:
            { return symbol(sym.LCURLY);
            }
            // fall through
          case 89: break;
          case 18:
            { return symbol(sym.RCURLY);
            }
            // fall through
          case 90: break;
          case 19:
            { return symbol(sym.NE);
            }
            // fall through
          case 91: break;
          case 20:
            { return symbol(sym.STRING, new String(yytext()));
            }
            // fall through
          case 92: break;
          case 21:
            { return symbol(sym.LE);
            }
            // fall through
          case 93: break;
          case 22:
            { return symbol(sym.EQ);
            }
            // fall through
          case 94: break;
          case 23:
            { return symbol(sym.GE);
            }
            // fall through
          case 95: break;
          case 24:
            { return symbol(sym.AND);
            }
            // fall through
          case 96: break;
          case 25:
            { return symbol(sym.EVERY);
            }
            // fall through
          case 97: break;
          case 26:
            { return symbol(sym.ILE);
            }
            // fall through
          case 98: break;
          case 27:
            { return symbol(sym.ISE);
            }
            // fall through
          case 99: break;
          case 28:
            { return symbol(sym.FUNCTION);
            }
            // fall through
          case 100: break;
          case 29:
            { return symbol(sym.BREAK);
            }
            // fall through
          case 101: break;
          case 30:
            { return symbol(sym.LISTREMOVE);
            }
            // fall through
          case 102: break;
          case 31:
            { return symbol(sym.YAZ);
            }
            // fall through
          case 103: break;
          case 32:
            { return symbol(sym.CONTINUE);
            }
            // fall through
          case 104: break;
          case 33:
            { return symbol(sym.LISTADD);
            }
            // fall through
          case 105: break;
          case 34:
            { return symbol(sym.EGER);
            }
            // fall through
          case 106: break;
          case 35:
            { return symbol(sym.STREQ);
            }
            // fall through
          case 107: break;
          case 36:
            { return symbol(sym.FOR);
            }
            // fall through
          case 108: break;
          case 37:
            { return symbol(sym.OR);
            }
            // fall through
          case 109: break;
          case 38:
            { return symbol(sym.BEGIN);
            }
            // fall through
          case 110: break;
          case 39:
            { return symbol(sym.END);
            }
            // fall through
          case 111: break;
          case 40:
            { return symbol(sym.DEGIL);
            }
            // fall through
          case 112: break;
          case 41:
            { return symbol(sym.TRUE);
            }
            // fall through
          case 113: break;
          case 42:
            { return symbol((sym.LIST));
            }
            // fall through
          case 114: break;
          case 43:
            { return symbol(sym.YADA);
            }
            // fall through
          case 115: break;
          case 44:
            { return symbol(sym.CAGIR);
            }
            // fall through
          case 116: break;
          case 45:
            { return symbol(sym.VALUE);
            }
            // fall through
          case 117: break;
          case 46:
            { return symbol(sym.RETURN);
            }
            // fall through
          case 118: break;
          case 47:
            { return symbol(sym.VARIABLE);
            }
            // fall through
          case 119: break;
          case 48:
            { return symbol(sym.FALSE);
            }
            // fall through
          case 120: break;
          case 49:
            { /* ignore */
            }
            // fall through
          case 121: break;
          case 50:
            { return symbol(sym.LISTDELETEVARIABLE);
            }
            // fall through
          case 122: break;
          case 51:
            { return symbol(sym.ARASINDA);
            }
            // fall through
          case 123: break;
          case 52:
            { return symbol(sym.ART);
            }
            // fall through
          case 124: break;
          case 53:
            { return symbol(sym.INSIDE);
            }
            // fall through
          case 125: break;
          case 54:
            { return symbol(sym.POSITION);
            }
            // fall through
          case 126: break;
          case 55:
            { return symbol(sym.RANDOM);
            }
            // fall through
          case 127: break;
          case 56:
            { return symbol(sym.AZ);
            }
            // fall through
          case 128: break;
          case 57:
            { return symbol(sym.CONCATENATE);
            }
            // fall through
          case 129: break;
          case 58:
            { return symbol(sym.DEGIS);
            }
            // fall through
          case 130: break;
          case 59:
            { return symbol(sym.TOLIST);
            }
            // fall through
          case 131: break;
          case 60:
            { return symbol(sym.EXIT);
            }
            // fall through
          case 132: break;
          case 61:
            { return symbol(sym.STRNOTEQ);
            }
            // fall through
          case 133: break;
          case 62:
            { return symbol(sym.LISTUPDATE);
            }
            // fall through
          case 134: break;
          case 63:
            { return symbol(sym.READINT);
            }
            // fall through
          case 135: break;
          case 64:
            { return symbol(sym.READSTR);
            }
            // fall through
          case 136: break;
          case 65:
            { return symbol(sym.LISTGET);
            }
            // fall through
          case 137: break;
          case 66:
            { return symbol(sym.WHILE);
            }
            // fall through
          case 138: break;
          case 67:
            { return symbol(sym.LENGTH);
            }
            // fall through
          case 139: break;
          case 68:
            { return symbol(sym.SUBSTRING);
            }
            // fall through
          case 140: break;
          case 69:
            { return symbol(sym.MODE);
            }
            // fall through
          case 141: break;
          case 70:
            { return symbol(sym.LISTINDEX);
            }
            // fall through
          case 142: break;
          case 71:
            { return symbol(sym.LISTCLEAR);
            }
            // fall through
          case 143: break;
          case 72:
            { return symbol(sym.LISTLENGTH);
            }
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
