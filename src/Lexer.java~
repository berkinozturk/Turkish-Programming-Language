// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lcalc.flex

import java_cup.runtime.*;
      

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\5\0\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\12\21\1\0\1\22\1\23\1\24"+
    "\1\25\2\0\32\26\1\0\1\27\2\0\1\26\1\0"+
    "\1\30\1\31\1\32\1\33\1\34\1\26\1\35\1\36"+
    "\1\37\1\26\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\26\1\46\1\47\1\50\1\51\1\52\1\26\1\53"+
    "\1\54\1\55\1\56\1\0\1\57\7\0\1\3\41\0"+
    "\1\60\11\0\1\61\4\0\1\62\5\0\1\63\6\0"+
    "\1\64\1\65\1\66\262\0\1\67\u01af\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\21\20\1\21\1\22\1\23\1\0\1\24\2\0"+
    "\1\25\1\26\1\27\5\20\1\0\3\20\1\0\3\20"+
    "\2\0\3\20\3\0\11\20\1\30\1\20\1\0\4\20"+
    "\1\0\1\20\1\0\1\20\3\0\3\20\2\0\1\31"+
    "\1\32\1\33\3\0\2\20\1\34\3\20\1\35\3\20"+
    "\1\0\1\20\1\36\1\0\2\20\1\37\1\20\1\0"+
    "\1\20\1\0\1\20\3\0\1\40\1\20\1\41\3\0"+
    "\1\42\1\43\7\20\1\44\1\0\1\20\2\0\1\20"+
    "\2\0\1\45\1\0\1\20\4\0\1\20\1\46\1\47"+
    "\1\50\1\20\1\51\1\0\3\20\1\52\1\20\1\53"+
    "\3\0\1\20\1\0\1\54\1\0\1\20\1\0\1\55"+
    "\1\0\1\56\1\0\1\57\2\0\1\60\1\20\1\0"+
    "\4\20\1\0\1\61\1\0\1\20\2\0\1\20\1\62"+
    "\5\0\1\20\1\0\1\20\1\63\1\64\1\20\1\0"+
    "\1\61\1\0\1\65\2\0\1\20\1\0\1\66\1\67"+
    "\2\0\1\20\1\0\1\70\1\20\1\71\1\61\1\72"+
    "\2\0\1\20\3\0\1\73\1\20\1\74\1\20\1\0"+
    "\1\75\1\76\1\0\1\20\3\0\1\20\1\0\1\77"+
    "\2\0\1\100\1\101\2\0\1\20\5\0\1\102\1\103"+
    "\21\0\1\104\6\0\1\105\4\0\1\106\3\0\1\107"+
    "\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\70\0\160\0\250\0\340\0\70\0\70"+
    "\0\u0118\0\70\0\70\0\70\0\70\0\70\0\u0150\0\70"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\70\0\70\0\70\0\340"+
    "\0\70\0\u05e8\0\u0620\0\70\0\70\0\70\0\u0658\0\u0690"+
    "\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u0230"+
    "\0\u0230\0\u0230\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u0230"+
    "\0\u1228\0\u1260\0\u1298\0\u0230\0\u12d0\0\u1308\0\u1340\0\u1378"+
    "\0\u13b0\0\u0230\0\u13e8\0\u1420\0\u1458\0\u0230\0\u1490\0\u14c8"+
    "\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u0230\0\u1650"+
    "\0\u0230\0\u1688\0\u16c0\0\u16f8\0\70\0\70\0\u1730\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u0230\0\u18b8\0\u18f0"+
    "\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u0230\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\70\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u0230\0\u1d88"+
    "\0\70\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\70\0\u1ed8"+
    "\0\u1f10\0\u1f48\0\70\0\u1f80\0\70\0\u1fb8\0\u1ff0\0\u2028"+
    "\0\u2060\0\u0230\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0"+
    "\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\70"+
    "\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8"+
    "\0\u0230\0\u0230\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u0230\0\u2610"+
    "\0\u2648\0\u2680\0\u26b8\0\70\0\u26f0\0\u2728\0\u2760\0\u2798"+
    "\0\u27d0\0\u0230\0\u2808\0\70\0\70\0\70\0\u2840\0\u2878"+
    "\0\u28b0\0\u28e8\0\u2920\0\u2958\0\70\0\u2990\0\u0230\0\u29c8"+
    "\0\u2a00\0\u0230\0\70\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18"+
    "\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u0230\0\70\0\u2c68"+
    "\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\70"+
    "\0\u0230\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138"+
    "\0\u3170\0\u31a8\0\70\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0"+
    "\0\u32f8\0\70\0\u3330\0\u3368\0\u33a0\0\u33d8\0\70\0\u3410"+
    "\0\u3448\0\u3480\0\70\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\2\1\25"+
    "\1\26\1\27\1\30\1\31\1\24\1\32\1\33\1\34"+
    "\1\35\1\24\1\36\1\37\1\40\1\41\1\42\2\24"+
    "\1\43\1\24\1\44\1\24\1\45\1\46\10\2\72\0"+
    "\1\3\111\0\1\47\43\0\10\50\1\51\16\50\1\52"+
    "\40\50\13\0\1\53\75\0\1\17\72\0\1\54\67\0"+
    "\1\55\67\0\1\56\64\0\1\24\4\0\1\24\1\0"+
    "\26\24\33\0\1\24\4\0\1\24\1\0\16\24\1\57"+
    "\1\24\1\60\4\24\1\61\33\0\1\24\4\0\1\24"+
    "\1\0\1\62\6\24\1\63\16\24\6\0\1\64\24\0"+
    "\1\24\4\0\1\24\1\0\14\24\1\65\11\24\33\0"+
    "\1\24\4\0\1\24\1\0\4\24\1\66\7\24\1\67"+
    "\11\24\6\0\1\70\24\0\1\24\4\0\1\24\1\0"+
    "\10\24\1\71\1\72\11\24\1\73\2\24\7\0\1\74"+
    "\1\75\22\0\1\24\4\0\1\24\1\0\4\24\1\76"+
    "\21\24\33\0\1\24\4\0\1\24\1\0\11\24\1\77"+
    "\5\24\1\100\6\24\6\0\1\101\1\0\1\102\22\0"+
    "\1\24\4\0\1\24\1\0\26\24\7\0\1\103\23\0"+
    "\1\24\4\0\1\24\1\0\4\24\1\104\2\24\1\105"+
    "\16\24\33\0\1\24\4\0\1\24\1\0\14\24\1\106"+
    "\11\24\33\0\1\24\4\0\1\24\1\0\11\24\1\107"+
    "\14\24\33\0\1\24\4\0\1\24\1\0\14\24\1\110"+
    "\11\24\33\0\1\24\4\0\1\24\1\0\4\24\1\111"+
    "\21\24\33\0\1\24\4\0\1\24\1\0\7\24\1\112"+
    "\4\24\1\113\4\24\1\114\4\24\33\0\1\24\4\0"+
    "\1\24\1\0\4\24\1\115\21\24\33\0\1\24\4\0"+
    "\1\24\1\0\1\116\25\24\12\0\2\50\4\0\62\50"+
    "\13\0\1\117\75\0\1\24\4\0\1\24\1\0\1\120"+
    "\17\24\1\121\5\24\33\0\1\24\4\0\1\24\1\0"+
    "\11\24\1\122\14\24\33\0\1\24\4\0\1\24\1\0"+
    "\1\123\25\24\33\0\1\24\4\0\1\24\1\0\26\24"+
    "\10\0\1\124\22\0\1\24\4\0\1\24\1\0\20\24"+
    "\1\125\5\24\74\0\1\126\26\0\1\24\4\0\1\24"+
    "\1\0\13\24\1\127\12\24\33\0\1\24\4\0\1\24"+
    "\1\0\26\24\7\0\1\130\23\0\1\24\4\0\1\24"+
    "\1\0\26\24\7\0\1\131\64\0\1\132\26\0\1\24"+
    "\4\0\1\24\1\0\11\24\1\133\14\24\33\0\1\24"+
    "\4\0\1\24\1\0\4\24\1\134\21\24\33\0\1\24"+
    "\4\0\1\24\1\0\7\24\1\135\16\24\101\0\1\136"+
    "\67\0\1\137\21\0\1\24\4\0\1\24\1\0\16\24"+
    "\1\140\7\24\33\0\1\24\4\0\1\24\1\0\4\24"+
    "\1\141\21\24\33\0\1\24\4\0\1\24\1\0\4\24"+
    "\1\142\21\24\72\0\1\143\76\0\1\144\61\0\1\145"+
    "\27\0\1\24\4\0\1\24\1\0\13\24\1\146\12\24"+
    "\33\0\1\24\4\0\1\24\1\0\17\24\1\147\6\24"+
    "\33\0\1\24\4\0\1\24\1\0\20\24\1\150\5\24"+
    "\33\0\1\24\4\0\1\24\1\0\3\24\1\151\22\24"+
    "\33\0\1\24\4\0\1\24\1\0\17\24\1\152\6\24"+
    "\33\0\1\24\4\0\1\24\1\0\1\153\25\24\33\0"+
    "\1\24\4\0\1\24\1\0\11\24\1\154\14\24\33\0"+
    "\1\24\4\0\1\24\1\0\13\24\1\155\12\24\33\0"+
    "\1\24\4\0\1\24\1\0\1\24\1\156\24\24\33\0"+
    "\1\24\4\0\1\24\1\0\24\24\1\157\1\24\20\0"+
    "\1\160\12\0\1\24\4\0\1\24\1\0\13\24\1\161"+
    "\11\24\1\162\12\0\13\163\1\0\54\163\21\0\1\24"+
    "\4\0\1\24\1\0\17\24\1\164\6\24\33\0\1\24"+
    "\4\0\1\24\1\0\1\165\25\24\33\0\1\24\4\0"+
    "\1\24\1\0\1\166\25\24\33\0\1\24\4\0\1\24"+
    "\1\0\11\24\1\167\14\24\101\0\1\170\21\0\1\24"+
    "\4\0\1\24\1\0\7\24\1\171\16\24\53\0\1\172"+
    "\47\0\1\24\4\0\1\24\1\0\2\24\1\173\23\24"+
    "\101\0\1\174\67\0\1\175\43\0\1\176\45\0\1\24"+
    "\4\0\1\24\1\0\4\24\1\177\21\24\33\0\1\24"+
    "\4\0\1\24\1\0\12\24\1\200\13\24\33\0\1\24"+
    "\4\0\1\24\1\0\20\24\1\201\5\24\46\0\1\202"+
    "\72\0\1\203\67\0\1\204\67\0\1\205\76\0\1\206"+
    "\42\0\1\24\4\0\1\24\1\0\5\24\1\207\20\24"+
    "\33\0\1\24\4\0\1\24\1\0\20\24\1\210\5\24"+
    "\33\0\1\24\4\0\1\24\1\0\21\24\1\211\4\24"+
    "\33\0\1\24\4\0\1\24\1\0\7\24\1\212\16\24"+
    "\33\0\1\24\4\0\1\24\1\0\3\24\1\213\22\24"+
    "\33\0\1\24\4\0\1\24\1\0\16\24\1\214\7\24"+
    "\33\0\1\24\4\0\1\24\1\0\17\24\1\215\6\24"+
    "\33\0\1\24\4\0\1\24\1\0\1\216\25\24\45\0"+
    "\1\217\55\0\1\24\4\0\1\24\1\0\11\24\1\220"+
    "\14\24\12\0\13\163\1\221\54\163\21\0\1\24\4\0"+
    "\1\24\1\0\26\24\7\0\1\222\23\0\1\24\4\0"+
    "\1\24\1\0\16\24\1\223\7\24\33\0\1\24\4\0"+
    "\1\24\1\0\26\24\7\0\1\224\43\0\1\225\47\0"+
    "\1\24\4\0\1\24\1\0\16\24\1\226\7\24\76\0"+
    "\1\227\24\0\1\24\4\0\1\24\1\0\1\230\25\24"+
    "\46\0\1\231\2\0\1\232\76\0\1\233\54\0\1\234"+
    "\55\0\1\24\4\0\1\24\1\0\1\235\25\24\60\0"+
    "\1\236\71\0\1\237\62\0\1\240\45\0\1\24\4\0"+
    "\1\24\1\0\20\24\1\241\5\24\33\0\1\24\4\0"+
    "\1\24\1\0\4\24\1\242\21\24\33\0\1\24\4\0"+
    "\1\24\1\0\26\24\7\0\1\243\23\0\1\24\4\0"+
    "\1\24\1\0\20\24\1\244\5\24\33\0\1\24\4\0"+
    "\1\24\1\0\7\24\1\245\7\24\1\246\6\24\33\0"+
    "\1\24\4\0\1\24\1\0\1\247\25\24\33\0\1\24"+
    "\4\0\1\24\1\0\20\24\1\250\5\24\42\0\1\251"+
    "\60\0\1\24\4\0\1\24\1\0\26\24\7\0\1\252"+
    "\2\0\13\163\1\253\54\163\61\0\1\254\27\0\1\24"+
    "\4\0\1\24\1\0\10\24\1\255\15\24\73\0\1\256"+
    "\36\0\1\257\122\0\1\260\25\0\1\24\4\0\1\24"+
    "\1\0\20\24\1\261\5\24\60\0\1\262\62\0\1\263"+
    "\24\0\1\264\52\0\1\265\102\0\1\266\24\0\1\24"+
    "\4\0\1\24\1\0\13\24\1\267\12\24\20\0\1\270"+
    "\114\0\1\271\55\0\1\24\4\0\1\24\1\0\6\24"+
    "\1\272\17\24\33\0\1\24\4\0\1\24\1\0\17\24"+
    "\1\273\6\24\101\0\1\274\21\0\1\24\4\0\1\24"+
    "\1\0\7\24\1\275\16\24\33\0\1\24\4\0\1\24"+
    "\1\0\13\24\1\276\12\24\33\0\1\24\4\0\1\24"+
    "\1\0\20\24\1\277\5\24\33\0\1\24\4\0\1\24"+
    "\1\0\16\24\1\300\7\24\73\0\1\301\6\0\13\163"+
    "\1\302\54\163\43\0\1\303\45\0\1\24\4\0\1\24"+
    "\1\0\4\24\1\304\21\24\60\0\1\305\63\0\1\306"+
    "\46\0\1\24\4\0\1\24\1\0\4\24\1\307\21\24"+
    "\51\0\1\310\117\0\1\311\63\0\1\312\25\0\1\24"+
    "\4\0\1\24\1\0\26\24\7\0\1\313\35\0\1\314"+
    "\70\0\1\315\54\0\1\24\4\0\1\24\1\0\7\24"+
    "\1\316\16\24\63\0\1\317\37\0\1\24\4\0\1\24"+
    "\1\0\14\24\1\320\11\24\33\0\1\24\4\0\1\24"+
    "\1\0\20\24\1\321\5\24\33\0\1\24\4\0\1\24"+
    "\1\0\16\24\1\322\7\24\33\0\1\24\4\0\1\24"+
    "\1\0\7\24\1\323\16\24\100\0\1\324\14\0\1\325"+
    "\107\0\1\326\55\0\1\24\4\0\1\24\1\0\13\24"+
    "\1\327\12\24\52\0\1\330\113\0\1\331\24\0\1\24"+
    "\4\0\1\24\1\0\13\24\1\332\12\24\52\0\1\333"+
    "\75\0\1\334\102\0\1\335\42\0\1\336\73\0\1\337"+
    "\50\0\1\24\4\0\1\24\1\0\13\24\1\340\12\24"+
    "\20\0\1\341\102\0\1\24\4\0\1\24\1\0\13\24"+
    "\1\342\12\24\33\0\1\24\4\0\1\24\1\0\13\24"+
    "\1\343\12\24\101\0\1\344\13\0\1\345\104\0\1\346"+
    "\73\0\1\347\116\0\1\350\25\0\1\24\4\0\1\24"+
    "\1\0\1\351\25\24\46\0\1\352\76\0\1\353\111\0"+
    "\1\354\41\0\1\355\51\0\1\24\4\0\1\24\1\0"+
    "\3\24\1\356\1\357\2\24\1\360\16\24\61\0\1\361"+
    "\41\0\1\24\4\0\1\24\1\0\5\24\1\362\20\24"+
    "\55\0\1\363\67\0\1\364\45\0\1\24\4\0\1\24"+
    "\1\0\20\24\1\365\5\24\55\0\1\366\111\0\1\367"+
    "\71\0\1\370\21\0\1\24\4\0\1\24\1\0\4\24"+
    "\1\371\21\24\20\0\1\372\12\0\1\24\4\0\1\24"+
    "\1\0\13\24\1\373\12\24\76\0\1\374\36\0\1\375"+
    "\55\0\1\24\4\0\1\24\1\0\4\24\1\376\21\24"+
    "\51\0\1\377\111\0\1\u0100\45\0\1\u0101\51\0\1\24"+
    "\4\0\1\24\1\0\10\24\1\u0102\15\24\62\0\1\u0103"+
    "\25\0\1\u0104\12\0\1\24\4\0\1\24\1\0\26\24"+
    "\75\0\1\u0105\40\0\1\u0106\76\0\1\u0107\65\0\1\u0108"+
    "\47\0\1\24\4\0\1\24\1\0\7\24\1\u0109\16\24"+
    "\46\0\1\u010a\104\0\1\u010b\64\0\1\u010c\64\0\1\u010d"+
    "\32\0\1\u010e\123\0\1\u010f\102\0\1\u0110\46\0\1\u0111"+
    "\41\0\1\u0112\130\0\1\u0113\57\0\1\u0114\101\0\1\u0115"+
    "\50\0\1\u0116\75\0\1\u0117\114\0\1\u0118\57\0\1\u0119"+
    "\55\0\1\u011a\60\0\1\u011b\63\0\1\u011c\120\0\1\u011d"+
    "\47\0\1\u011e\67\0\1\u011f\67\0\1\u0120\74\0\1\u0121"+
    "\55\0\1\u0122\104\0\1\u0123\46\0\1\u0124\67\0\1\u0125"+
    "\124\0\1\u0126\45\0\1\u0127\73\0\1\u0128\107\0\1\u0129"+
    "\65\0\1\u012a\53\0\1\u012b\77\0\1\u012c\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13496];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\2\11\1\1\5\11\1\1\1\11"+
    "\24\1\3\11\1\0\1\11\2\0\3\11\5\1\1\0"+
    "\3\1\1\0\3\1\2\0\3\1\3\0\13\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\3\0\3\1\2\0"+
    "\3\1\3\0\12\1\1\0\2\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\3\0\3\1\3\0\2\11\10\1"+
    "\1\0\1\1\2\0\1\1\2\0\1\1\1\0\1\1"+
    "\4\0\1\1\1\11\4\1\1\0\5\1\1\11\3\0"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\1\11\1\0"+
    "\1\11\1\0\1\1\2\0\2\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\11\5\0\1\1"+
    "\1\0\4\1\1\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\11\1\1\2\0\1\1\1\0\2\1\3\11"+
    "\2\0\1\1\3\0\1\11\3\1\1\0\1\1\1\11"+
    "\1\0\1\1\3\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\11\2\0\1\1\5\0\1\11\1\1\21\0\1\11"+
    "\6\0\1\11\4\0\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return symbol(sym.EOF);
            }  // fall though
            case 301: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <"+yytext()+">");
            }
            // fall through
          case 73: break;
          case 2:
            { /* do nothing */
            }
            // fall through
          case 74: break;
          case 3:
            { return symbol(sym.LPAREN);
            }
            // fall through
          case 75: break;
          case 4:
            { return symbol(sym.RPAREN);
            }
            // fall through
          case 76: break;
          case 5:
            { return symbol(sym.TIMES);
            }
            // fall through
          case 77: break;
          case 6:
            { return symbol(sym.PLUS);
            }
            // fall through
          case 78: break;
          case 7:
            { return symbol(sym.COMMA);
            }
            // fall through
          case 79: break;
          case 8:
            { return symbol(sym.MINUS);
            }
            // fall through
          case 80: break;
          case 9:
            { return symbol(sym.DOT);
            }
            // fall through
          case 81: break;
          case 10:
            { return symbol(sym.DIVIDE);
            }
            // fall through
          case 82: break;
          case 11:
            { return symbol(sym.NUM, new Integer(yytext()));
            }
            // fall through
          case 83: break;
          case 12:
            { return symbol(sym.SEMI);
            }
            // fall through
          case 84: break;
          case 13:
            { return symbol(sym.LT);
            }
            // fall through
          case 85: break;
          case 14:
            { return symbol(sym.ASSIGN);
            }
            // fall through
          case 86: break;
          case 15:
            { return symbol(sym.GT);
            }
            // fall through
          case 87: break;
          case 16:
            { return symbol(sym.IDENT, new String(yytext()));
            }
            // fall through
          case 88: break;
          case 17:
            { return symbol(sym.LCURLY);
            }
            // fall through
          case 89: break;
          case 18:
            { return symbol(sym.RCURLY);
            }
            // fall through
          case 90: break;
          case 19:
            { return symbol(sym.NE);
            }
            // fall through
          case 91: break;
          case 20:
            { return symbol(sym.STRING, new String(yytext()));
            }
            // fall through
          case 92: break;
          case 21:
            { return symbol(sym.LE);
            }
            // fall through
          case 93: break;
          case 22:
            { return symbol(sym.EQ);
            }
            // fall through
          case 94: break;
          case 23:
            { return symbol(sym.GE);
            }
            // fall through
          case 95: break;
          case 24:
            { return symbol(sym.AND);
            }
            // fall through
          case 96: break;
          case 25:
            { return symbol(sym.EVERY);
            }
            // fall through
          case 97: break;
          case 26:
            { return symbol(sym.ILE);
            }
            // fall through
          case 98: break;
          case 27:
            { return symbol(sym.ISE);
            }
            // fall through
          case 99: break;
          case 28:
            { return symbol(sym.NOT);
            }
            // fall through
          case 100: break;
          case 29:
            { return symbol(sym.LISTREMOVE);
            }
            // fall through
          case 101: break;
          case 30:
            { return symbol(sym.YAZ);
            }
            // fall through
          case 102: break;
          case 31:
            { return symbol(sym.CONTINUE);
            }
            // fall through
          case 103: break;
          case 32:
            { return symbol(sym.LISTADD);
            }
            // fall through
          case 104: break;
          case 33:
            { return symbol(sym.EXIT);
            }
            // fall through
          case 105: break;
          case 34:
            { return symbol(sym.FUNCTION);
            }
            // fall through
          case 106: break;
          case 35:
            { return symbol(sym.BREAK);
            }
            // fall through
          case 107: break;
          case 36:
            { return symbol(sym.OR);
            }
            // fall through
          case 108: break;
          case 37:
            { return symbol(sym.END);
            }
            // fall through
          case 109: break;
          case 38:
            { return symbol(sym.EGER);
            }
            // fall through
          case 110: break;
          case 39:
            { return symbol(sym.STREQ);
            }
            // fall through
          case 111: break;
          case 40:
            { return symbol(sym.FOR);
            }
            // fall through
          case 112: break;
          case 41:
            { return symbol((sym.LIST));
            }
            // fall through
          case 113: break;
          case 42:
            { return symbol(sym.SONRA);
            }
            // fall through
          case 114: break;
          case 43:
            { return symbol(sym.YADA);
            }
            // fall through
          case 115: break;
          case 44:
            { return symbol(sym.BEGIN);
            }
            // fall through
          case 116: break;
          case 45:
            { return symbol(sym.DEGIL);
            }
            // fall through
          case 117: break;
          case 46:
            { return symbol(sym.TRUE);
            }
            // fall through
          case 118: break;
          case 47:
            { return symbol(sym.VARIABLE);
            }
            // fall through
          case 119: break;
          case 48:
            { return symbol(sym.LENGTH);
            }
            // fall through
          case 120: break;
          case 49:
            { /* ignore */
            }
            // fall through
          case 121: break;
          case 50:
            { return symbol(sym.VALUE);
            }
            // fall through
          case 122: break;
          case 51:
            { return symbol(sym.READINT);
            }
            // fall through
          case 123: break;
          case 52:
            { return symbol(sym.READSTR);
            }
            // fall through
          case 124: break;
          case 53:
            { return symbol(sym.ART);
            }
            // fall through
          case 125: break;
          case 54:
            { return symbol(sym.RETURN);
            }
            // fall through
          case 126: break;
          case 55:
            { return symbol(sym.LISTDELETEVARIABLE);
            }
            // fall through
          case 127: break;
          case 56:
            { return symbol(sym.POSITION);
            }
            // fall through
          case 128: break;
          case 57:
            { return symbol(sym.FALSE);
            }
            // fall through
          case 129: break;
          case 58:
            { return symbol(sym.ARASINDA);
            }
            // fall through
          case 130: break;
          case 59:
            { return symbol(sym.INSIDE);
            }
            // fall through
          case 131: break;
          case 60:
            { return symbol(sym.TOLIST);
            }
            // fall through
          case 132: break;
          case 61:
            { return symbol(sym.SUBSTRING);
            }
            // fall through
          case 133: break;
          case 62:
            { return symbol(sym.AZ);
            }
            // fall through
          case 134: break;
          case 63:
            { return symbol(sym.LISTUPDATE);
            }
            // fall through
          case 135: break;
          case 64:
            { return symbol(sym.CONCATENATE);
            }
            // fall through
          case 136: break;
          case 65:
            { return symbol(sym.DEGIS);
            }
            // fall through
          case 137: break;
          case 66:
            { return symbol(sym.STRNOTEQ);
            }
            // fall through
          case 138: break;
          case 67:
            { return symbol(sym.LISTGET);
            }
            // fall through
          case 139: break;
          case 68:
            { return symbol(sym.WHILE);
            }
            // fall through
          case 140: break;
          case 69:
            { return symbol(sym.LISTCLEAR);
            }
            // fall through
          case 141: break;
          case 70:
            { return symbol(sym.MODE);
            }
            // fall through
          case 142: break;
          case 71:
            { return symbol(sym.LISTLENGTH);
            }
            // fall through
          case 143: break;
          case 72:
            { return symbol(sym.LISTINDEX);
            }
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
